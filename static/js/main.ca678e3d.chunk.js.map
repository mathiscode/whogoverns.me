{"version":3,"sources":["assets/images/default-photo.jpg","lib/google-api.js","components/Navbar.js","components/LoadingSpinner.js","components/AddressBar.js","components/OfficialCard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CIVIC_API_PARAMS","key","CIVIC_API_KEY","GEOCODE_API_PARAMS","GEOCODE_API_KEY","API","client","axios","create","getCity","latitude","longitude","a","get","params","latlng","representatives","options","voterInfo","topCities","Navbar","props","urlParams","URLSearchParams","window","location","search","id","className","icon","map","city","href","style","marginLeft","LoadingSpinner","size","AddressBar","state","address","handleChange","localStorage","removeItem","setState","handleSelect","setItem","history","pushState","path","origin","geocodeByAddress","then","results","getLatLng","latLng","onChange","catch","error","console","this","getItem","value","onSelect","searchOptions","componentRestrictions","country","classNames","input","autocompleteContainer","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","suggestion","active","backgroundColor","cursor","borderRadius","padding","description","Component","OfficialCard","mapAddress","formattedAddress","line1","line2","line3","zip","encodedAddress","encodeURIComponent","mapUrl","open","searchName","office","official","name","party","officeName","proxiedPhotoUrl","photoUrl","includes","replace","photos","defaultPhoto","push","Array","isArray","src","loader","color","length","phones","title","target","rel","emails","onClick","urls","channels","channel","url","appUrl","type","test","navigator","userAgent","MapsAPIUrl","keys","PLACES_API_KEY","App","isLoading","showAddressBar","componentDidMount","interval","setInterval","google","document","querySelector","focus","addEventListener","e","select","clearInterval","fetch","res","json","data","country_code","alert","err","log","Google","divisions","Object","values","forEach","division","offices","officeIndices","officials","classList","add","blur","scrollToTop","scrollTo","GOOGLE_ANALYTICS_TRACKING_ID","process","actionStyle","Helmet","async","safeDivisionName","officeIndex","officialIndices","officialIndex","Fragment","Math","random","alwaysShowTitle","event","mainButtonStyles","children","text","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","library","fab","faAngleDoubleUp","faBars","faEnvelope","faGavel","faHeart","faLink","faMapMarkerAlt","faPhone","faGlobeAmericas","faDemocrat","faRepublican","faVoteYea","faWindowMinimize","faBeer","faSearch","faLandmark","faCity","ReactDOM","render","getElementById","URL","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ca678e3d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/default-photo.447bb7f2.jpg\";","import axios from 'axios'\n\nimport {\n  CIVIC_API_KEY,\n  GEOCODE_API_KEY\n} from '../config/keys.json'\n\nconst CIVIC_API_ROOT = 'https://www.googleapis.com/civicinfo/v2'\nconst GEOCODE_API_ROOT = 'https://maps.googleapis.com/maps/api/geocode/json'\n\nconst CIVIC_API_PARAMS = { key: CIVIC_API_KEY }\nconst GEOCODE_API_PARAMS = { key: GEOCODE_API_KEY }\nconst API = {}\n\nconst client = axios.create({})\n\n// Used during development\n// client.interceptors.request.use(request => {\n//   console.log('Starting Request', request)\n//   return request\n// })\n\n// client.interceptors.response.use(response => {\n//   console.log('Response:', response)\n//   return response\n// })\n\nAPI.getCity = async (latitude, longitude) => {\n  return client.get(GEOCODE_API_ROOT, {\n    params: {\n      ...GEOCODE_API_PARAMS,\n      latlng: `${latitude}, ${longitude}`\n    }\n  })\n}\n\nAPI.representatives = async (options) => {\n  return client.get(`${CIVIC_API_ROOT}/representatives`, {\n    params: {\n      ...CIVIC_API_PARAMS,\n      ...options\n    }\n  })\n}\n\nAPI.voterInfo = async (options) => {\n  return client.get(`${CIVIC_API_ROOT}/voterinfo`, {\n    params: {\n      ...CIVIC_API_PARAMS,\n      ...options\n    }\n  })\n}\n\nexport default API\n","import React from 'react'\r\nimport { FontAwesomeIcon as Icon } from '@fortawesome/react-fontawesome'\r\n\r\nconst topCities = [\r\n  'New York, NY',\r\n  'Los Angeles, CA',\r\n  'Chicago, IL'\r\n]\r\n\r\nexport default function Navbar(props) {\r\n  const urlParams = new URLSearchParams(window.location.search)\r\n\r\n  return (\r\n    <nav id='navbar' className='navbar sticky-top navbar-expand-lg navbar-dark bg-dark'>\r\n      <button className='navbar-brand navbar-title btn btn-link animated slideInLeft'>\r\n        <Icon icon='gavel' />\r\n        <span className='icon-text'>Who Governs Me?</span>\r\n      </button>\r\n\r\n      <div id=\"navbarMenu\" className='collapse navbar-collapse'>\r\n        <ul className='navbar-nav ml-auto animated slideInRight'>\r\n\r\n          {\r\n            topCities.map(city => {\r\n              return (\r\n                <li key={city} className={`nav-item ${urlParams.get('address') === city ? 'active' : '' }`}>\r\n                  <a className='nav-link btn btn-link' href={`?address=${city}`}>\r\n                    <Icon icon='city' />\r\n                    <span style={{ marginLeft: '10px' }}>{city}</span>\r\n                  </a>\r\n                </li>\r\n              )\r\n            })\r\n          }\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n","import React from 'react'\nimport { CubeGrid } from 'styled-spinkit'\n\nexport default function LoadingSpinner(props) {\n  return (\n    <CubeGrid size={props.size || 128} />\n  )\n}\n","/* global history */\n\nimport React, { Component } from 'react'\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete'\n\nexport default class AddressBar extends Component {\n  state = { address: null }\n\n  handleChange = address => {\n    address = address !== '' ? address : null\n    if (!address) localStorage.removeItem('address')\n    this.setState({ address })\n  }\n\n  handleSelect = address => {\n    this.setState({ address })\n    localStorage.setItem('address', address)\n\n    if (window.history.pushState) {\n      var path = window.location.origin + `?address=${address}`;\n      window.history.pushState({ path }, '', path);\n    }\n    \n    geocodeByAddress(address)\n      .then(results => getLatLng(results[0]))\n      .then(latLng => this.props.onChange(address, latLng))\n      .catch(error => console.error(error))\n  }\n\n  componentDidMount () {\n    const urlParams = new URLSearchParams(window.location.search)\n    if (urlParams.get('address')) return this.handleSelect(urlParams.get('address'))\n    if (localStorage.getItem('address')) return this.handleSelect(localStorage.getItem('address'))\n  }\n\n  render() {\n    return (\n      <PlacesAutocomplete\n        value={this.state.address || localStorage.getItem('address') || ''}\n        onChange={this.handleChange}\n        onSelect={this.handleSelect}\n        searchOptions={{\n          componentRestrictions: { country: 'us' }\n        }}\n        classNames={{\n          input: 'places-search-input form-control',\n          autocompleteContainer: 'search-autocomplete-container'\n        }}\n      >\n        {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n          <div>\n            <input\n              {...getInputProps({\n                placeholder: \"What's your address?\",\n                className: 'location-search-input',\n              })}\n            />\n            <p className=\"text-muted text-right\"><em>Or, just your City and State if you prefer.</em></p>\n            <div className=\"autocomplete-dropdown-container\">\n              {loading && <div>Loading...</div>}\n              {suggestions.map(suggestion => {\n                const className = suggestion.active\n                  ? 'suggestion-item--active'\n                  : 'suggestion-item';\n                // inline style for demonstration purpose\n                const style = suggestion.active\n                  ? { backgroundColor: '#ddd', cursor: 'pointer', borderRadius: '4px', padding: '2px' }\n                  : { backgroundColor: '#ffffff', cursor: 'pointer' };\n                return (\n                  <div\n                    {...getSuggestionItemProps(suggestion, {\n                      className,\n                      style,\n                    })}\n                  >\n                    <span>{suggestion.description}</span>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        )}\n      </PlacesAutocomplete>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport Img from 'react-image'\nimport VisibilitySensor from 'react-visibility-sensor'\nimport { FontAwesomeIcon as Icon } from '@fortawesome/react-fontawesome'\n\nimport defaultPhoto from '../assets/images/default-photo.jpg'\n\nexport default class OfficialCard extends Component {\n  mapAddress = (address) => {\n    const formattedAddress = `${address.line1} ${address.line2} ${address.line3} ${address.city} ${address.state} ${address.zip}`\n    const encodedAddress = encodeURIComponent(formattedAddress)\n    const mapUrl = `https://www.google.com/maps/search/?api=1&query=${encodedAddress}`\n\n    // console.log(formattedAddress, encodedAddress, mapUrl)\n    window.open(mapUrl)\n  }\n\n  render () {\n    const { office, official } = this.props\n\n    // Some tweaks for best Ballotpedia search results\n    let searchName\n    switch (official.name) {\n      case 'Donald J. Trump':\n        searchName = 'Donald Trump'; break;\n      default:\n        searchName = official.name\n    }\n\n    const party = \n      official.party ?\n        official.party === 'Unknown' ? 'Unknown Party' : official.party\n        : 'Unknown Party'\n\n    let officeName = office.name\n    switch (office.name) {\n      case 'governmentOfficer':\n        officeName = 'Government Officer'; break;\n      case 'legislatorUpperBody':\n        officeName = 'Legislator, Upper Body'; break;\n      case 'headofGovernment':\n        officeName = 'Head of Government'; break;\n      default:\n    }\n\n    let photoUrl = official.photoUrl\n    let proxiedPhotoUrl\n\n    // The White House has high-res images which are slow to load, replace the current ones\n    // Yes, this is crazy hacky. It's going to require manual update when the administration changes, but it's better for UX.\n    if (photoUrl === 'https://www.whitehouse.gov/sites/whitehouse.gov/files/images/45/PE%20Color.jpg') photoUrl = 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRKx6EYhhB26AqqnnfUHX5B3HuLPilvjkKXzWR8-C8G29fOtoUN'\n    if (photoUrl === 'https://www.whitehouse.gov/sites/whitehouse.gov/files/images/45/VPE%20Color.jpg') photoUrl = 'https://upload.wikimedia.org/wikipedia/commons/thumb/b/b9/Mike_Pence_official_Vice_Presidential_portrait.jpg/1200px-Mike_Pence_official_Vice_Presidential_portrait.jpg'\n  \n    // Proxy http images via https to prevent mixed content warnings\n    // Some sites block the request, so we try https version of original url first, then proxy\n    if (photoUrl && photoUrl.includes('http://')) {\n      photoUrl = photoUrl.replace('http://', 'https://')\n      proxiedPhotoUrl = `https://http-securifier.herokuapp.com/?url=${official.photoUrl}`\n    }\n\n    // Images timeout on attempting https, so to speed things up for common domains we hack around the usual order\n    if (photoUrl && photoUrl.includes('bioguide.congress.gov')) photoUrl = proxiedPhotoUrl\n\n    const photos = photoUrl ? [photoUrl] : defaultPhoto\n    if (proxiedPhotoUrl) photos.push(proxiedPhotoUrl)\n    if (Array.isArray(photos)) photos.push(defaultPhoto)\n\n    return (\n      <div className='official-card card mb-4'>\n        <div className='card-header'>\n          <VisibilitySensor>\n            <Img\n              className='img-thumbnail official-profile-image float-left'\n              src={photos}\n              loader={<Img className='img-thumbnail official-profile-image float-left' src={defaultPhoto} />}\n            />\n          </VisibilitySensor>\n\n          <p className='text-right'>\n            <span className='official-name'>{official.name}</span>\n            <br />\n            <span className='office-name'>{officeName}</span>\n            <br />\n\n            <span className='office-party'>\n              { party.includes('Republican') && <Icon icon='republican' color='#E91D0E' /> }\n              { party.includes('Democrat') && <Icon icon='democrat' color='#232066' /> }\n              <span className='icon-text'>{party}</span>\n            </span>\n\n          </p>\n        </div>\n\n        <div className='card-body'>\n          <div className='row'>\n            <div className='col'>\n              <address>\n                {\n                  official.address && official.address.length > 0 &&\n                  <p>\n                    \n                      { official.address[0].line1 !== '' && <span>{official.address[0].line1}<br /></span> }\n                      { official.address[0].line2 !== '' && <span>{official.address[0].line2}<br /></span> }\n                      { official.address[0].line3 !== '' && <span>{official.address[0].line3}<br />></span> }\n                      <span>{official.address[0].city}, {official.address[0].state} {official.address[0].zip}<br /></span>\n                    \n                  </p>\n                }\n\n                {\n                  official.phones && official.phones.length > 0 &&\n                  <>\n                    <Icon icon='phone' />\n                    <a className='icon-text' href={`tel:${official.phones[0]}`}>{official.phones[0]}</a>\n                    <br />\n                  </>\n                }\n              </address>\n            </div>\n          </div>\n          \n          {/* <pre>{JSON.stringify(official, null, 2)}</pre> */}\n        </div>\n\n        <div className='card-footer'>\n          <div className='text-center'>\n            {\n              <a title='Search on Ballotpedia' className='btn btn-link' href={`https://ballotpedia.org/wiki/index.php?search=${searchName}`} target='_blank' rel='noopener noreferrer'>\n                <Icon icon='vote-yea' size='2x' />\n              </a>\n            }\n\n            {\n              official.emails && official.emails.length > 0 &&\n              <a title='Send Email' className='btn btn-link' href={`mailto:${official.emails[0]}`}>\n                <Icon icon='envelope' size='2x' />\n              </a>\n            }\n\n            {\n              official.phones && official.phones.length > 0 &&\n                <a title={`Call: ${official.phones[0]}`} className='btn btn-link' href={`tel://${official.phones[0]}`}>\n                  <Icon icon='phone' size='2x' />\n                </a>\n            }\n\n            {\n              official.address && official.address.length > 0 &&\n              <span title='View on Map' className='btn btn-link' onClick={() => this.mapAddress(official.address[0]) }>\n                <Icon icon='map-marker-alt' size='2x' />\n              </span>\n            }\n\n            {\n              official.urls && official.urls.length > 0 &&\n                <a title={`Visit website: ${official.urls[0]}`} className='btn btn-link' href={official.urls[0]} target='_blank' rel='noopener noreferrer'>\n                  <Icon icon='link' size='2x' />\n                </a>\n            }\n\n            {\n              official.channels && official.channels.length > 0 &&\n              official.channels.map(channel => {\n                let icon = null\n                let url = null\n                let appUrl = null\n\n                switch (channel.type) {\n                  case 'Facebook':\n                    icon = <Icon icon={['fab', 'facebook']} size='2x' />\n                    url = `https://fb.me/${channel.id}`\n                    // Have to do extra work to convert page name to page ID; not now\n                    // appUrl = `fb://profile?id=${channel.id}`\n                    appUrl = url\n                    break;\n                  case 'Twitter':\n                    icon = <Icon icon={['fab', 'twitter']} size='2x' />\n                    url = `https://twitter.com/${channel.id}`\n                    appUrl = `twitter://user?screen_name=${channel.id}`\n                    break;\n                  case 'YouTube':\n                    // Sometimes it's a channel ID instead. Not a quick way to determine channel/user without Youtube API. Avoiding for now.\n                    icon = <Icon icon={['fab', 'youtube']} size='2x' />\n                    url = `https://youtube.com/user/${channel.id}`\n                    appUrl = url\n                    break;\n                  default:\n                    icon = null\n                }\n\n                return (\n                  <span key={channel.type + channel.id}>\n                      {\n                        icon &&\n                        <a title={`${channel.type}: ${channel.id}`} className='btn btn-link' key={channel.type + channel.id} href={/Mobi|Android/i.test(navigator.userAgent) ? appUrl : url} target='_blank' rel='noopener noreferrer'>\n                          {icon}\n                        </a>\n                      }\n                  </span>\n                )\n              })\n            }\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n","/*\r\n  App: WhoGoverns.me\r\n  Author: J.R. Mathis <https://github.com/mathiscode/whogoverns.me>\r\n  License: See LICENSE.md\r\n\r\n  Description:\r\n    This app pulls Google Civic data to assist citizens in contacting their representatives.\r\n*/\r\n\r\nimport React, { Component } from 'react'\r\nimport { Helmet } from 'react-helmet'\r\nimport { FontAwesomeIcon as Icon } from '@fortawesome/react-fontawesome'\r\nimport { Fab, Action } from 'react-tiny-fab'\r\nimport 'react-tiny-fab/dist/styles.css'\r\n\r\nimport keys from './config/keys.json'\r\nimport Google from './lib/google-api'\r\n\r\nimport Navbar from './components/Navbar'\r\nimport LoadingSpinner from './components/LoadingSpinner'\r\nimport AddressBar from './components/AddressBar'\r\nimport OfficialCard from './components/OfficialCard'\r\n\r\nconst MapsAPIUrl = `https://maps.googleapis.com/maps/api/js?key=${keys.PLACES_API_KEY}&libraries=places`\r\n\r\nclass App extends Component {\r\n  state = {\r\n    isLoading: false,\r\n    showAddressBar: false,\r\n    representatives: null\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    let interval;\r\n    const checkGMapsLoaded = () => {\r\n      if (window.google) {\r\n        this.setState({ showAddressBar: true }, () => {\r\n          document.querySelector('.location-search-input').focus()\r\n          document.querySelector('.location-search-input').addEventListener('focus', e => {\r\n            e.target.select()\r\n          })\r\n        })\r\n\r\n        clearInterval(interval)\r\n      }\r\n    }\r\n\r\n    interval = setInterval(checkGMapsLoaded, 100)\r\n\r\n    fetch('https://json.geoiplookup.io')\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        if (data.country_code !== 'US') {\r\n          window.alert('Please note that this app only provides data for the United States')\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(err)\r\n      })\r\n  }\r\n\r\n  onChange = async (address, latLng) => {\r\n    // console.log(address, latLng)\r\n\r\n    try {\r\n      this.setState({ isLoading: true, representatives: null })\r\n      let results = await Google.representatives({ address })\r\n\r\n      let divisions = []\r\n      Object.values(results.data.divisions).forEach(division => {\r\n        divisions.push({ name: division.name, offices: division.officeIndices })\r\n      })\r\n\r\n      this.setState({\r\n        isLoading: false,\r\n        representatives: { divisions, offices: results.data.offices, officials: results.data.officials }\r\n      })\r\n\r\n      document.querySelector('.address-search-container').classList.add('done')\r\n      document.querySelector('.location-search-input').blur()\r\n\r\n      document.title = `Who Governs Me? • ${address}`\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }\r\n\r\n  scrollToTop = () => {\r\n    window.scrollTo(0, 0)\r\n  }\r\n\r\n  render() {\r\n    keys.GOOGLE_ANALYTICS_TRACKING_ID = process.env.GOOGLE_ANALYTICS_TRACKING_ID || keys.GOOGLE_ANALYTICS_TRACKING_ID || ''\r\n\r\n    const actionStyle = {\r\n      backgroundColor: '#2222aa'\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <Helmet>\r\n          <script src={MapsAPIUrl}></script>\r\n\r\n          {\r\n            keys.GOOGLE_ANALYTICS_TRACKING_ID &&\r\n              <script async src={`https://www.googletagmanager.com/gtag/js?id=${keys.GOOGLE_ANALYTICS_TRACKING_ID}`}></script>\r\n          }\r\n\r\n          {\r\n            keys.GOOGLE_ANALYTICS_TRACKING_ID &&\r\n            <script>\r\n              {\r\n                `window.dataLayer = window.dataLayer || [];\r\n                function gtag(){dataLayer.push(arguments);}\r\n                gtag('js', new Date());\r\n                gtag('config', '${keys.GOOGLE_ANALYTICS_TRACKING_ID}');\r\n              `}\r\n            </script>\r\n          }\r\n        </Helmet>\r\n        \r\n        <Navbar />\r\n\r\n        <div className='container address-search-container'>\r\n          {\r\n            this.state.showAddressBar &&\r\n            <>\r\n              <AddressBar \r\n                onChange={this.onChange}\r\n              />\r\n            </>\r\n          }\r\n        </div>\r\n        \r\n        <div className='container search-results-wrapper'>\r\n          {\r\n            this.state.isLoading && <LoadingSpinner />\r\n          }\r\n\r\n          {\r\n            this.state.representatives &&\r\n            <div className='row'>\r\n              <div className='col'>\r\n                {\r\n                  this.state.representatives.divisions.map(division => {\r\n                    if (!division.offices || division.offices.length === 0) return null\r\n\r\n                    let safeDivisionName = division.name.replace(/([' | ])+/g, '_')\r\n\r\n                    return (\r\n                      <section key={division.name} id={'SECTION_' + safeDivisionName}>\r\n                        <div className='card mt-4'>\r\n                          <div className='card-header bg-dark text-white'>\r\n                            <h3>\r\n                              <Icon icon='landmark' />\r\n                              <span style={{ marginLeft: '20px' }}>{division.name !== 'United States' ? division.name : 'Federal'}</span>\r\n                            </h3>\r\n                          </div>\r\n                          \r\n                          <div id={safeDivisionName} className='card-body collapse show'>\r\n                            <div className='card-deck'>\r\n                              {\r\n                                division.offices && division.offices.map(officeIndex => {\r\n                                  const office = this.state.representatives.offices[officeIndex]\r\n                                  const officials = office.officialIndices.map(officialIndex => this.state.representatives.officials[officialIndex])\r\n\r\n                                  return (\r\n                                    <React.Fragment key={officeIndex}>\r\n                                      \r\n                                        {\r\n                                          officials.map(official => {\r\n                                            return (\r\n                                              <OfficialCard key={official.name + Math.random()} office={office} official={official} />\r\n                                            )\r\n                                          })\r\n                                        }\r\n                                      \r\n                                    </React.Fragment>\r\n                                  )\r\n                                })\r\n                              }\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </section>\r\n                    )\r\n                  })\r\n                }\r\n              </div>\r\n            </div>\r\n          }\r\n\r\n          {/* <pre>{JSON.stringify(this.state.representatives, null, 2)}</pre> */}\r\n        </div>\r\n\r\n        <footer className='footer mt-auto py-3'>\r\n          <div className='container'>\r\n            <a href='https://github.com/mathiscode/whogoverns.me' target='_blank' rel='noopener noreferrer'>Made with <Icon icon='heart' color='#d00' /> by J.R. Mathis</a>\r\n            <small className='float-right'><em>Data provided by <a href='https://developers.google.com/civic-information' target='_blank' rel='noopener noreferrer'>Google Civic Information</a></em></small>\r\n          </div>\r\n        </footer>\r\n\r\n        <Fab\r\n          alwaysShowTitle={true}\r\n          event='click'\r\n          icon={<Icon icon='bars' />}\r\n          mainButtonStyles={{ backgroundColor: '#aa0000' }}\r\n          children={\r\n            [\r\n              <Action text='Search' style={actionStyle}\r\n                onClick={() => {\r\n                  this.scrollToTop()\r\n                  document.querySelector('.location-search-input').focus()\r\n                }}\r\n              >\r\n                <Icon icon='search' />\r\n              </Action>,\r\n\r\n              <Action text='Register to Vote' style={actionStyle} onClick={() => window.open('https://www.vote.org/register-to-vote/', '_blank')}><Icon icon='vote-yea' /></Action>,\r\n              <Action text='Buy me a beer' style={actionStyle} onClick={() => window.open('https://beerpay.io/mathiscode/whogoverns.me', '_blank')}><Icon icon='beer' /></Action>\r\n            ]\r\n          }\r\n        />\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/wgm-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'WhoGoverns.me Service Worker ready!'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { fab } from '@fortawesome/free-brands-svg-icons'\n\nimport App from './App'\n\nimport 'bootstrap/dist/css/bootstrap.css'\nimport './index.scss'\nimport 'animate.css'\n\nimport * as serviceWorker from './serviceWorker'\n\n// Setup FontAwesome Library\nimport {\n  faAngleDoubleUp, \n  faBars, \n  faEnvelope, \n  faGavel, \n  faHeart, \n  faLink, \n  faMapMarkerAlt, \n  faPhone, \n  faGlobeAmericas, \n  faDemocrat, \n  faRepublican, \n  faVoteYea, \n  faWindowMinimize, \n  faBeer, \n  faSearch,\n  faLandmark,\n  faCity\n} from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(\n  fab,\n  faAngleDoubleUp,\n  faBars,\n  faEnvelope,\n  faGavel,\n  faHeart,\n  faLink,\n  faMapMarkerAlt,\n  faPhone,\n  faGlobeAmericas,\n  faDemocrat,\n  faRepublican,\n  faVoteYea,\n  faWindowMinimize,\n  faBeer,\n  faSearch,\n  faLandmark,\n  faCity\n)\n\nReactDOM.render(<App />, document.getElementById('root'))\n\nserviceWorker.register()"],"sourceRoot":""}