{"version":3,"sources":["lib/google-api.js","components/Navbar.js","components/LoadingSpinner.js","components/AddressBar.js","components/OfficialCard.js","App.js","serviceWorker.js","index.js","assets/images/default-photo.jpg"],"names":["CIVIC_API_PARAMS","key","GEOCODE_API_PARAMS","API","client","axios","create","getCity","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","latitude","longitude","wrap","_context","prev","next","abrupt","get","params","objectSpread","latlng","concat","stop","_x","_x2","apply","this","arguments","representatives","_ref2","_callee2","options","_context2","_x3","voterInfo","_ref3","_callee3","_context3","_x4","Navbar","props","react_default","createElement","id","className","react_fontawesome_index_es","icon","href","target","rel","color","LoadingSpinner","styled_spinkit_esm","size","AddressBar","state","address","handleChange","localStorage","removeItem","_this","setState","handleSelect","setItem","geocodeByAddress","then","results","getLatLng","latLng","onChange","catch","error","console","getItem","dist_default","value","onSelect","searchOptions","componentRestrictions","country","classNames","input","autocompleteContainer","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","map","suggestion","active","style","backgroundColor","cursor","borderRadius","padding","description","Component","OfficialCard","_this$props","office","official","party","officeName","name","visibility_sensor_default","umd_default","src","photoUrl","defaultPhoto","loader","includes","length","line1","line2","line3","city","zip","phones","Fragment","urls","channels","channel","url","appUrl","type","test","navigator","userAgent","MapsAPIUrl","keys","PLACES_API_KEY","App","isLoading","showAddressBar","handleHashChange","log","window","location","hash","divisionID","componentDidMount","interval","addEventListener","e","setInterval","google","document","querySelector","focus","select","clearInterval","divisions","Google","sent","values","data","forEach","division","push","offices","officeIndices","officials","classList","add","blur","t0","anchorClick","group","closest","item","getAttribute","querySelectorAll","currentItem","remove","history","pushState","scrollToTop","scrollTo","_this2","Helmet","AddressBar_AddressBar","toLowerCase","replace","title","onClick","officeIndex","officialIndices","officialIndex","OfficialCard_OfficialCard","Math","random","Boolean","hostname","match","library","fab","faAngleDoubleUp","faBars","faGavel","faHeart","faPhone","faGlobeAmericas","faDemocrat","faRepublican","ReactDOM","render","src_App","getElementById","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.ecabf2d1.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst CIVIC_API_KEY = 'AIzaSyDjHqzqi8jfGkzQAtTlbEfZ1IC0xMcX7og'\r\nconst GEOCODE_API_KEY = 'AIzaSyAjxi_5qrwbEHzNcWOP5X3kBnOGjlsZ5iM'\r\n\r\nconst CIVIC_API_ROOT = 'https://www.googleapis.com/civicinfo/v2'\r\nconst GEOCODE_API_ROOT = 'https://maps.googleapis.com/maps/api/geocode/json'\r\n\r\nconst CIVIC_API_PARAMS = { key: CIVIC_API_KEY }\r\nconst GEOCODE_API_PARAMS = { key: GEOCODE_API_KEY }\r\nconst API = {}\r\n\r\nconst client = axios.create({})\r\n\r\n// client.interceptors.request.use(request => {\r\n//   console.log('Starting Request', request)\r\n//   return request\r\n// })\r\n\r\n// client.interceptors.response.use(response => {\r\n//   console.log('Response:', response)\r\n//   return response\r\n// })\r\n\r\nAPI.getCity = async (latitude, longitude) => {\r\n  return client.get(GEOCODE_API_ROOT, {\r\n    params: {\r\n      ...GEOCODE_API_PARAMS,\r\n      latlng: `${latitude}, ${longitude}`\r\n    }\r\n  })\r\n}\r\n\r\nAPI.representatives = async (options) => {\r\n  return client.get(`${CIVIC_API_ROOT}/representatives`, {\r\n    params: {\r\n      ...CIVIC_API_PARAMS,\r\n      ...options\r\n    }\r\n  })\r\n}\r\n\r\nAPI.voterInfo = async (options) => {\r\n  return client.get(`${CIVIC_API_ROOT}/voterinfo`, {\r\n    params: {\r\n      ...CIVIC_API_PARAMS,\r\n      ...options\r\n    }\r\n  })\r\n}\r\n\r\n\r\n// exports.GEOCODE_API_KEY = GEOCODE_API_KEY\r\n\r\nexport default API\r\n","import React from 'react'\r\nimport { FontAwesomeIcon as Icon } from '@fortawesome/react-fontawesome'\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav id='navbar' className='navbar sticky-top navbar-expand-lg navbar-dark bg-dark'>\r\n      <button className='navbar-brand navbar-title btn btn-link animated slideInLeft'>\r\n        <Icon icon='gavel' />\r\n        <span className='icon-text'>Who Governs Me?</span>\r\n      </button>\r\n      <ul className='navbar-nav ml-auto'>\r\n        <li className='nav-item active'>\r\n          <a className='nav-link btn btn-link' href='https://github.com/mathiscode' target='_blank' rel='noopener noreferrer'>\r\n            Made with {<Icon icon='heart' color='#d00' />} by J.R. Mathis\r\n          </a>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { CubeGrid } from 'styled-spinkit'\r\n\r\nexport default function LoadingSpinner(props) {\r\n  return (\r\n    <CubeGrid size={props.size || 128} />\r\n  )\r\n}\r\n","import React, { Component } from 'react'\r\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete'\r\n\r\nexport default class AddressBar extends Component {\r\n  state = { address: null }\r\n\r\n  handleChange = address => {\r\n    address = address !== '' ? address : null\r\n    if (!address) localStorage.removeItem('address')\r\n    this.setState({ address })\r\n  }\r\n\r\n  handleSelect = address => {\r\n    this.setState({ address })\r\n    localStorage.setItem('address', address)\r\n    \r\n    geocodeByAddress(address)\r\n      .then(results => getLatLng(results[0]))\r\n      .then(latLng => this.props.onChange(address, latLng))\r\n      .catch(error => console.error(error))\r\n  }\r\n\r\n  componentDidMount () {\r\n    if(localStorage.getItem('address')) this.handleSelect(localStorage.getItem('address'))\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <PlacesAutocomplete\r\n        value={this.state.address || localStorage.getItem('address') || ''}\r\n        onChange={this.handleChange}\r\n        onSelect={this.handleSelect}\r\n        searchOptions={{\r\n          componentRestrictions: { country: 'us' }\r\n        }}\r\n        classNames={{\r\n          input: 'places-search-input form-control',\r\n          autocompleteContainer: 'search-autocomplete-container'\r\n        }}\r\n      >\r\n        {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\r\n          <div>\r\n            <input\r\n              {...getInputProps({\r\n                placeholder: \"What's your address?\",\r\n                className: 'location-search-input',\r\n              })}\r\n            />\r\n            <div className=\"autocomplete-dropdown-container\">\r\n              {loading && <div>Loading...</div>}\r\n              {suggestions.map(suggestion => {\r\n                const className = suggestion.active\r\n                  ? 'suggestion-item--active'\r\n                  : 'suggestion-item';\r\n                // inline style for demonstration purpose\r\n                const style = suggestion.active\r\n                  ? { backgroundColor: '#ddd', cursor: 'pointer', borderRadius: '4px', padding: '2px' }\r\n                  : { backgroundColor: '#ffffff', cursor: 'pointer' };\r\n                return (\r\n                  <div\r\n                    {...getSuggestionItemProps(suggestion, {\r\n                      className,\r\n                      style,\r\n                    })}\r\n                  >\r\n                    <span>{suggestion.description}</span>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </PlacesAutocomplete>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Img from 'react-image'\r\nimport VisibilitySensor from 'react-visibility-sensor'\r\nimport { FontAwesomeIcon as Icon } from '@fortawesome/react-fontawesome'\r\n\r\nimport defaultPhoto from '../assets/images/default-photo.jpg'\r\n\r\nexport default class OfficialCard extends Component {\r\n  render () {\r\n    const { office, official } = this.props\r\n    const party = \r\n      official.party ?\r\n        official.party === 'Unknown' ? 'Unknown Party' : official.party\r\n        : 'Unknown Party'\r\n\r\n    let officeName = office.name\r\n    switch (office.name) {\r\n      case 'governmentOfficer':\r\n        officeName = 'Government Officer'; break;\r\n      case 'legislatorUpperBody':\r\n        officeName = 'Legislator, Upper Body'; break;\r\n      case 'headofGovernment':\r\n        officeName = 'Head of Government'; break;\r\n      default:\r\n    }\r\n\r\n    return (\r\n      <div className='official-card card mb-4'>\r\n        <div className='card-header'>\r\n          <VisibilitySensor>\r\n            <Img\r\n              className='img-thumbnail official-profile-image float-left'\r\n              src={official.photoUrl ? [official.photoUrl, defaultPhoto] : defaultPhoto}\r\n              loader={<Img className='img-thumbnail official-profile-image float-left' src={defaultPhoto} />}\r\n            />\r\n          </VisibilitySensor>\r\n\r\n          <p className='text-right'>\r\n            <span className='official-name'>{official.name}</span>\r\n            <br />\r\n            <span className='office-name'>{officeName}</span>\r\n            <br />\r\n\r\n            <span className='office-party'>\r\n              { party.includes('Republican') && <Icon icon='republican' color='#E91D0E' /> }\r\n              { party.includes('Democrat') && <Icon icon='democrat' color='#232066' /> }\r\n              <span className='icon-text'>{party}</span>\r\n            </span>\r\n\r\n          </p>\r\n        </div>\r\n\r\n        <div className='card-body'>\r\n          <div className='row'>\r\n            <div className='col-sm'>\r\n              <address>\r\n                {\r\n                  official.address && official.address.length > 0 &&\r\n                  <p>\r\n                    { official.address[0].line1 !== '' && <span>{official.address[0].line1}<br /></span> }\r\n                    { official.address[0].line2 !== '' && <span>{official.address[0].line2}<br /></span> }\r\n                    { official.address[0].line3 !== '' && <span>{official.address[0].line3}<br />></span> }\r\n                    <span>{official.address[0].city}, {official.address[0].state} {official.address[0].zip}<br /></span>\r\n                  </p>\r\n                }\r\n\r\n                {\r\n                  official.phones && official.phones.length > 0 &&\r\n                  <>\r\n                    <Icon icon='phone' />\r\n                    <a className='icon-text' href={`tel:${official.phones[0]}`}>{official.phones[0]}</a>\r\n                    <br />\r\n                  </>\r\n                }\r\n              </address>\r\n            </div>\r\n\r\n            <div className='col-sm text-right'>\r\n              {\r\n                official.urls && official.urls.length > 0 &&\r\n                <>\r\n                  <a className='icon-text-left' href={official.urls[0]} target='_blank' rel='noopener noreferrer'>Visit Website</a>\r\n                  <Icon icon='globe-americas' />\r\n                  <br />\r\n                </>\r\n              }\r\n              \r\n              {\r\n                official.channels && official.channels.length > 0 &&\r\n                official.channels.map(channel => {\r\n                  let icon = null\r\n                  let url = null\r\n                  let appUrl = null\r\n\r\n                  switch (channel.type) {\r\n                    case 'Facebook':\r\n                      icon = <Icon icon={['fab', 'facebook']} />\r\n                      url = `https://fb.me/${channel.id}`\r\n                      // Have to do extra work to convert page name to page ID; not now\r\n                      // appUrl = `fb://profile?id=${channel.id}`\r\n                      appUrl = url\r\n                      break;\r\n                    case 'Twitter':\r\n                      icon = <Icon icon={['fab', 'twitter']} />\r\n                      url = `https://twitter.com/${channel.id}`\r\n                      appUrl = `twitter://user?screen_name=${channel.id}`\r\n                      break;\r\n                    case 'YouTube':\r\n                      icon = <Icon icon={['fab', 'youtube']} />\r\n                      url = `https://youtube.com/user/${channel.id}`\r\n                      appUrl = url\r\n                      break;\r\n                    default:\r\n                      icon = null\r\n                  }\r\n\r\n                  return (\r\n                    <React.Fragment key={channel.type + channel.id}>\r\n                      {\r\n                        icon &&\r\n                        <>\r\n                          <a className='icon-text-left' href={/Mobi|Android/i.test(navigator.userAgent) ? appUrl : url} target='_blank' rel='noopener noreferrer'>{channel.id}</a>\r\n                          {icon}\r\n                          <br />\r\n                        </>\r\n                      }\r\n                    </React.Fragment>\r\n                  )\r\n                })\r\n              }\r\n            </div>\r\n          </div>\r\n          \r\n          {/* <pre>{JSON.stringify(official, null, 2)}</pre> */}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\nimport { Helmet } from 'react-helmet'\n// import classNames from 'classnames'\n// import StickyBox from 'react-sticky-box'\n// import AnchorLink from 'react-anchor-link-smooth-scroll'\nimport { FontAwesomeIcon as Icon } from '@fortawesome/react-fontawesome'\n\nimport keys from './config/keys'\nimport Google from './lib/google-api'\n\nimport Navbar from './components/Navbar'\nimport LoadingSpinner from './components/LoadingSpinner'\nimport AddressBar from './components/AddressBar'\nimport OfficialCard from './components/OfficialCard'\n\nconst MapsAPIUrl = `https://maps.googleapis.com/maps/api/js?key=${keys.PLACES_API_KEY}&libraries=places`\n\nclass App extends Component {\n  state = {\n    isLoading: false,\n    showAddressBar: false,\n    representatives: null\n  }\n\n  handleHashChange = () => {\n    console.log(window.location.hash)\n    this.setState({ divisionID: window.location.hash })\n  }\n\n  componentDidMount = () => {\n    window.addEventListener('hashchange', this.handleHashChange)\n    window.addEventListener('scroll', e => {\n      // if (window.scrollY > 107) document.querySelector('.sidebar').style.top = '100px'\n      // const wrapper = document.querySelector('.search-results-wrapper')\n      // const group = wrapper.closest('.list-group')\n      // const hash = wrapper.getAttribute('id')\n      // console.log(window.scrollY, { wrapper, group, hash })\n    })\n\n    let interval;\n    const checkGMapsLoaded = () => {\n      if (window.google) {\n        this.setState({ showAddressBar: true }, () => {\n          document.querySelector('.location-search-input').focus()\n          document.querySelector('.location-search-input').addEventListener('focus', e => {\n            e.target.select()\n          })\n        })\n\n        clearInterval(interval)\n      }\n    }\n\n    interval = setInterval(checkGMapsLoaded, 100)\n  }\n\n  onChange = async (address, latLng) => {\n    console.log(address, latLng)\n\n    try {\n      this.setState({ isLoading: true, representatives: null })\n      let results = await Google.representatives({ address })\n\n      let divisions = []\n      Object.values(results.data.divisions).forEach(division => {\n        divisions.push({ name: division.name, offices: division.officeIndices })\n      })\n\n      this.setState({\n        isLoading: false,\n        representatives: { divisions, offices: results.data.offices, officials: results.data.officials }\n      })\n\n      document.querySelector('.address-search-container').classList.add('done')\n      document.querySelector('.location-search-input').blur()\n    } catch (e) {\n      console.error(e)\n    }\n  }\n\n  anchorClick = e => {\n    const group = e.target.closest('.list-group')\n    const item = e.target.closest('.list-group-item')\n    const hash = item.getAttribute('href')\n    console.log(group, item, hash)\n    \n    group.querySelectorAll('.list-group-item').forEach(currentItem => currentItem.classList.remove('active'))\n    item.classList.add('active')\n\n    if(window.history.pushState) {\n      window.history.pushState(null, null, hash);\n    } else {\n      window.location.hash = hash;\n    }\n  }\n\n  scrollToTop = () => {\n    window.scrollTo(0, 0)\n\n    if(window.history.pushState) {\n      window.history.pushState(null, null, ' ');\n    } else {\n      window.location.hash = ' ';\n    }\n  }\n\n  render() {\n    return (\n      <>\n        <Helmet>\n          <title>Who Governs Me?</title>\n          <script src={MapsAPIUrl}></script>\n        </Helmet>\n        \n        <Navbar />\n\n        <div className='container address-search-container'>\n          {\n            this.state.showAddressBar &&\n            <>\n              <AddressBar \n                onChange={this.onChange}\n              />\n            </>\n          }\n        </div>\n        \n        <div className='container search-results-wrapper'>\n          {\n            this.state.isLoading && <LoadingSpinner />\n          }\n\n          {\n            this.state.representatives &&\n            <div className='row'>\n              { /* Done messing with navigation for now. Didn't want to resort to react-router. */ }\n              {/* <div className='col-lg-3'>\n                <StickyBox className='sidebar'>\n                  <div className='card mt-4'>\n                    <div className='list-group' onClick={this.anchorClick}>\n                      {\n                        this.state.representatives.divisions.map(division => {\n                          if (!division.offices || division.offices.length === 0) return\n\n                          return (\n                            <AnchorLink\n                              key={division.name}\n                              offset={70}\n                              href={`#${division.name.toLowerCase().replace(/%[0-9A-F]{2}/gi, '').replace(/\\s/g, '_').replace(/'/g, '')}`}\n                              className={classNames(\n                                'list-group-item list-group-item-action',\n                                // {\n                                //   active: `#${division.name.toLowerCase().replace(/%[0-9A-F]{2}/gi, '').replace(/\\s/g, '_')}` === this.state.divisionID\n                                // }\n                              )}\n                            >\n                                <span>{division.name !== 'United States' ? division.name : 'Federal'}</span>\n                            </AnchorLink>\n                          )\n                        })\n                      }\n                    </div>\n                  </div>\n                </StickyBox>\n              </div> */}\n\n              <div className='col-lg'>\n                {\n                  this.state.representatives.divisions.map(division => {\n                    if (!division.offices || division.offices.length === 0) return null\n\n                    return (\n                      <section key={division.name} id={division.name.toLowerCase().replace(/%[0-9A-F]{2}/gi, '').replace(/\\s/g, '_').replace(/'/g, '')}>\n                        <div className='card mt-4'>\n                          <div className='card-header bg-dark text-white'>\n                            <h3>\n                              {division.name !== 'United States' ? division.name : 'Federal'}\n                              <span title='Go to Top' className='float-right' style={{ cursor: 'pointer' }} onClick={this.scrollToTop}><Icon icon='angle-double-up' /></span>\n                            </h3>\n                          </div>\n                          <div className='card-body'>\n                            <div className='card-deck'>\n                              {\n                                division.offices && division.offices.map(officeIndex => {\n                                  const office = this.state.representatives.offices[officeIndex]\n                                  const officials = office.officialIndices.map(officialIndex => this.state.representatives.officials[officialIndex])\n\n                                  return (\n                                    <React.Fragment key={officeIndex}>\n                                      \n                                        {\n                                          officials.map(official => {\n                                            return (\n                                              <OfficialCard key={official.name + Math.random()} office={office} official={official} />\n                                            )\n                                          })\n                                        }\n                                      \n                                    </React.Fragment>\n                                  )\n                                })\n                              }\n                            </div>\n                          </div>\n                        </div>\n                      </section>\n                    )\n                  })\n                }\n\n                {/* <div style={{ height: '500px' }} />{ /* Make scrolling to last section scroll properly */ } */}\n              </div>\n            </div>\n          }\n\n          {/* <pre>{JSON.stringify(this.state.representatives, null, 2)}</pre> */}\n          { !this.state.isLoading && <small><em>Data provided by <a href='https://developers.google.com/civic-information' target='_blank' rel='noopener noreferrer'>Google Civic Information</a></em></small> }\n        </div>\n      </>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { fab } from '@fortawesome/free-brands-svg-icons'\n\nimport App from './App'\n\nimport 'bootstrap/dist/css/bootstrap.css'\nimport './index.scss'\nimport 'animate.css'\n\nimport * as serviceWorker from './serviceWorker'\n\n// Setup FontAwesome Library\nimport {\n  faAngleDoubleUp, faBars, faGavel, faHeart, faPhone, faGlobeAmericas, faDemocrat, faRepublican\n} from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(\n  fab,\n  faAngleDoubleUp,\n  faBars,\n  faGavel,\n  faHeart,\n  faPhone,\n  faGlobeAmericas,\n  faDemocrat,\n  faRepublican\n)\n\nReactDOM.render(<App />, document.getElementById('root'))\n\nserviceWorker.unregister()\n","module.exports = __webpack_public_path__ + \"static/media/default-photo.447bb7f2.jpg\";"],"sourceRoot":""}