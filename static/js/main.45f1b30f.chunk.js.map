{"version":3,"sources":["lib/google-api.js","components/Navbar.js","components/LoadingSpinner.js","components/AddressBar.js","components/OfficialCard.js","App.js","serviceWorker.js","index.js","assets/images/default-photo.jpg"],"names":["CIVIC_API_PARAMS","key","CIVIC_API_KEY","GEOCODE_API_PARAMS","GEOCODE_API_KEY","API","client","axios","create","getCity","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","latitude","longitude","wrap","_context","prev","next","abrupt","get","params","objectSpread","latlng","concat","stop","_x","_x2","apply","this","arguments","representatives","_ref2","_callee2","options","_context2","_x3","voterInfo","_ref3","_callee3","_context3","_x4","topCities","Navbar","props","urlParams","URLSearchParams","window","location","search","react_default","createElement","id","className","react_fontawesome_index_es","icon","map","city","href","style","marginLeft","LoadingSpinner","styled_spinkit_esm","size","AddressBar","state","address","handleChange","localStorage","removeItem","_this","setState","handleSelect","setItem","history","pushState","path","origin","geocodeByAddress","then","results","getLatLng","latLng","onChange","catch","error","console","getItem","dist_default","value","onSelect","searchOptions","componentRestrictions","country","classNames","input","autocompleteContainer","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","suggestion","active","backgroundColor","cursor","borderRadius","padding","description","Component","OfficialCard","mapAddress","formattedAddress","line1","line2","line3","zip","encodedAddress","encodeURIComponent","mapUrl","open","searchName","_this2","_this$props","office","official","name","party","officeName","proxiedPhotoUrl","photoUrl","includes","replace","photos","defaultPhoto","push","Array","isArray","visibility_sensor_default","umd_default","src","loader","color","length","phones","Fragment","title","target","rel","emails","onClick","urls","channels","channel","url","appUrl","type","test","navigator","userAgent","MapsAPIUrl","keys","PLACES_API_KEY","App","isLoading","showAddressBar","componentDidMount","interval","setInterval","google","document","querySelector","focus","addEventListener","e","select","clearInterval","divisions","Google","sent","values","data","forEach","division","offices","officeIndices","officials","classList","add","blur","t0","scrollToTop","scrollTo","GOOGLE_ANALYTICS_TRACKING_ID","process","actionStyle","Helmet","ADSENSE_DATA_AD_CLIENT","data-ad-client","async","AddressBar_AddressBar","safeDivisionName","officeIndex","officialIndices","officialIndex","OfficialCard_OfficialCard","Math","random","fab_esm","alwaysShowTitle","event","mainButtonStyles","children","text","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","library","fab","faAngleDoubleUp","faBars","faEnvelope","faGavel","faHeart","faLink","faMapMarkerAlt","faPhone","faGlobeAmericas","faDemocrat","faRepublican","faVoteYea","faWindowMinimize","faBeer","faSearch","faLandmark","faCity","ReactDOM","render","src_App","getElementById","URL","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.45f1b30f.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nimport {\r\n  CIVIC_API_KEY,\r\n  GEOCODE_API_KEY\r\n} from '../config/keys.json'\r\n\r\nconst CIVIC_API_ROOT = 'https://www.googleapis.com/civicinfo/v2'\r\nconst GEOCODE_API_ROOT = 'https://maps.googleapis.com/maps/api/geocode/json'\r\n\r\nconst CIVIC_API_PARAMS = { key: CIVIC_API_KEY }\r\nconst GEOCODE_API_PARAMS = { key: GEOCODE_API_KEY }\r\nconst API = {}\r\n\r\nconst client = axios.create({})\r\n\r\n// Used during development\r\n// client.interceptors.request.use(request => {\r\n//   console.log('Starting Request', request)\r\n//   return request\r\n// })\r\n\r\n// client.interceptors.response.use(response => {\r\n//   console.log('Response:', response)\r\n//   return response\r\n// })\r\n\r\nAPI.getCity = async (latitude, longitude) => {\r\n  return client.get(GEOCODE_API_ROOT, {\r\n    params: {\r\n      ...GEOCODE_API_PARAMS,\r\n      latlng: `${latitude}, ${longitude}`\r\n    }\r\n  })\r\n}\r\n\r\nAPI.representatives = async (options) => {\r\n  return client.get(`${CIVIC_API_ROOT}/representatives`, {\r\n    params: {\r\n      ...CIVIC_API_PARAMS,\r\n      ...options\r\n    }\r\n  })\r\n}\r\n\r\nAPI.voterInfo = async (options) => {\r\n  return client.get(`${CIVIC_API_ROOT}/voterinfo`, {\r\n    params: {\r\n      ...CIVIC_API_PARAMS,\r\n      ...options\r\n    }\r\n  })\r\n}\r\n\r\nexport default API\r\n","import React from 'react'\r\nimport { FontAwesomeIcon as Icon } from '@fortawesome/react-fontawesome'\r\n\r\nconst topCities = [\r\n  'New York, NY',\r\n  'Los Angeles, CA',\r\n  'Chicago, IL'\r\n]\r\n\r\nexport default function Navbar(props) {\r\n  const urlParams = new URLSearchParams(window.location.search)\r\n\r\n  return (\r\n    <nav id='navbar' className='navbar sticky-top navbar-expand-lg navbar-dark bg-dark'>\r\n      <button className='navbar-brand navbar-title btn btn-link animated slideInLeft'>\r\n        <Icon icon='gavel' />\r\n        <span className='icon-text'>Who Governs Me?</span>\r\n      </button>\r\n\r\n      <div id=\"navbarMenu\" className='collapse navbar-collapse'>\r\n        <ul className='navbar-nav ml-auto animated slideInRight'>\r\n\r\n          {\r\n            topCities.map(city => {\r\n              return (\r\n                <li key={city} className={`nav-item ${urlParams.get('address') === city ? 'active' : '' }`}>\r\n                  <a className='nav-link btn btn-link' href={`?address=${city}`}>\r\n                    <Icon icon='city' />\r\n                    <span style={{ marginLeft: '10px' }}>{city}</span>\r\n                  </a>\r\n                </li>\r\n              )\r\n            })\r\n          }\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { CubeGrid } from 'styled-spinkit'\r\n\r\nexport default function LoadingSpinner(props) {\r\n  return (\r\n    <CubeGrid size={props.size || 128} />\r\n  )\r\n}\r\n","/* global history */\r\n\r\nimport React, { Component } from 'react'\r\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete'\r\n\r\nexport default class AddressBar extends Component {\r\n  state = { address: null }\r\n\r\n  handleChange = address => {\r\n    address = address !== '' ? address : null\r\n    if (!address) localStorage.removeItem('address')\r\n    this.setState({ address })\r\n  }\r\n\r\n  handleSelect = address => {\r\n    this.setState({ address })\r\n    localStorage.setItem('address', address)\r\n\r\n    if (window.history.pushState) {\r\n      var path = window.location.origin + `?address=${address}`;\r\n      window.history.pushState({ path }, '', path);\r\n    }\r\n    \r\n    geocodeByAddress(address)\r\n      .then(results => getLatLng(results[0]))\r\n      .then(latLng => this.props.onChange(address, latLng))\r\n      .catch(error => console.error(error))\r\n  }\r\n\r\n  componentDidMount () {\r\n    const urlParams = new URLSearchParams(window.location.search)\r\n    if (urlParams.get('address')) return this.handleSelect(urlParams.get('address'))\r\n    if (localStorage.getItem('address')) return this.handleSelect(localStorage.getItem('address'))\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <PlacesAutocomplete\r\n        value={this.state.address || localStorage.getItem('address') || ''}\r\n        onChange={this.handleChange}\r\n        onSelect={this.handleSelect}\r\n        searchOptions={{\r\n          componentRestrictions: { country: 'us' }\r\n        }}\r\n        classNames={{\r\n          input: 'places-search-input form-control',\r\n          autocompleteContainer: 'search-autocomplete-container'\r\n        }}\r\n      >\r\n        {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\r\n          <div>\r\n            <input\r\n              {...getInputProps({\r\n                placeholder: \"What's your address?\",\r\n                className: 'location-search-input',\r\n              })}\r\n            />\r\n            <div className=\"autocomplete-dropdown-container\">\r\n              {loading && <div>Loading...</div>}\r\n              {suggestions.map(suggestion => {\r\n                const className = suggestion.active\r\n                  ? 'suggestion-item--active'\r\n                  : 'suggestion-item';\r\n                // inline style for demonstration purpose\r\n                const style = suggestion.active\r\n                  ? { backgroundColor: '#ddd', cursor: 'pointer', borderRadius: '4px', padding: '2px' }\r\n                  : { backgroundColor: '#ffffff', cursor: 'pointer' };\r\n                return (\r\n                  <div\r\n                    {...getSuggestionItemProps(suggestion, {\r\n                      className,\r\n                      style,\r\n                    })}\r\n                  >\r\n                    <span>{suggestion.description}</span>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </PlacesAutocomplete>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Img from 'react-image'\r\nimport VisibilitySensor from 'react-visibility-sensor'\r\nimport { FontAwesomeIcon as Icon } from '@fortawesome/react-fontawesome'\r\n\r\nimport defaultPhoto from '../assets/images/default-photo.jpg'\r\n\r\nexport default class OfficialCard extends Component {\r\n  mapAddress = (address) => {\r\n    const formattedAddress = `${address.line1} ${address.line2} ${address.line3} ${address.city} ${address.state} ${address.zip}`\r\n    const encodedAddress = encodeURIComponent(formattedAddress)\r\n    const mapUrl = `https://www.google.com/maps/search/?api=1&query=${encodedAddress}`\r\n\r\n    // console.log(formattedAddress, encodedAddress, mapUrl)\r\n    window.open(mapUrl)\r\n  }\r\n\r\n  render () {\r\n    const { office, official } = this.props\r\n\r\n    // Some tweaks for best Ballotpedia search results\r\n    let searchName\r\n    switch (official.name) {\r\n      case 'Donald J. Trump':\r\n        searchName = 'Donald Trump'; break;\r\n      default:\r\n        searchName = official.name\r\n    }\r\n\r\n    const party = \r\n      official.party ?\r\n        official.party === 'Unknown' ? 'Unknown Party' : official.party\r\n        : 'Unknown Party'\r\n\r\n    let officeName = office.name\r\n    switch (office.name) {\r\n      case 'governmentOfficer':\r\n        officeName = 'Government Officer'; break;\r\n      case 'legislatorUpperBody':\r\n        officeName = 'Legislator, Upper Body'; break;\r\n      case 'headofGovernment':\r\n        officeName = 'Head of Government'; break;\r\n      default:\r\n    }\r\n\r\n    let photoUrl = official.photoUrl\r\n    let proxiedPhotoUrl\r\n\r\n    // The White House has high-res images which are slow to load, replace the current ones\r\n    // Yes, this is crazy hacky. It's going to require manual update when the administration changes, but it's better for UX.\r\n    if (photoUrl === 'https://www.whitehouse.gov/sites/whitehouse.gov/files/images/45/PE%20Color.jpg') photoUrl = 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRKx6EYhhB26AqqnnfUHX5B3HuLPilvjkKXzWR8-C8G29fOtoUN'\r\n    if (photoUrl === 'https://www.whitehouse.gov/sites/whitehouse.gov/files/images/45/VPE%20Color.jpg') photoUrl = 'https://upload.wikimedia.org/wikipedia/commons/thumb/b/b9/Mike_Pence_official_Vice_Presidential_portrait.jpg/1200px-Mike_Pence_official_Vice_Presidential_portrait.jpg'\r\n  \r\n    // Proxy http images via https to prevent mixed content warnings\r\n    // Some sites block the request, so we try https version of original url first, then proxy\r\n    if (photoUrl && photoUrl.includes('http://')) {\r\n      photoUrl = photoUrl.replace('http://', 'https://')\r\n      proxiedPhotoUrl = `https://http-securifier.herokuapp.com/?url=${official.photoUrl}`\r\n    }\r\n\r\n    // Images timeout on attempting https, so to speed things up for common domains we hack around the usual order\r\n    if (photoUrl && photoUrl.includes('bioguide.congress.gov')) photoUrl = proxiedPhotoUrl\r\n\r\n    const photos = photoUrl ? [photoUrl] : defaultPhoto\r\n    if (proxiedPhotoUrl) photos.push(proxiedPhotoUrl)\r\n    if (Array.isArray(photos)) photos.push(defaultPhoto)\r\n\r\n    return (\r\n      <div className='official-card card mb-4'>\r\n        <div className='card-header'>\r\n          <VisibilitySensor>\r\n            <Img\r\n              className='img-thumbnail official-profile-image float-left'\r\n              src={photos}\r\n              loader={<Img className='img-thumbnail official-profile-image float-left' src={defaultPhoto} />}\r\n            />\r\n          </VisibilitySensor>\r\n\r\n          <p className='text-right'>\r\n            <span className='official-name'>{official.name}</span>\r\n            <br />\r\n            <span className='office-name'>{officeName}</span>\r\n            <br />\r\n\r\n            <span className='office-party'>\r\n              { party.includes('Republican') && <Icon icon='republican' color='#E91D0E' /> }\r\n              { party.includes('Democrat') && <Icon icon='democrat' color='#232066' /> }\r\n              <span className='icon-text'>{party}</span>\r\n            </span>\r\n\r\n          </p>\r\n        </div>\r\n\r\n        <div className='card-body'>\r\n          <div className='row'>\r\n            <div className='col'>\r\n              <address>\r\n                {\r\n                  official.address && official.address.length > 0 &&\r\n                  <p>\r\n                    \r\n                      { official.address[0].line1 !== '' && <span>{official.address[0].line1}<br /></span> }\r\n                      { official.address[0].line2 !== '' && <span>{official.address[0].line2}<br /></span> }\r\n                      { official.address[0].line3 !== '' && <span>{official.address[0].line3}<br />></span> }\r\n                      <span>{official.address[0].city}, {official.address[0].state} {official.address[0].zip}<br /></span>\r\n                    \r\n                  </p>\r\n                }\r\n\r\n                {\r\n                  official.phones && official.phones.length > 0 &&\r\n                  <>\r\n                    <Icon icon='phone' />\r\n                    <a className='icon-text' href={`tel:${official.phones[0]}`}>{official.phones[0]}</a>\r\n                    <br />\r\n                  </>\r\n                }\r\n              </address>\r\n            </div>\r\n          </div>\r\n          \r\n          {/* <pre>{JSON.stringify(official, null, 2)}</pre> */}\r\n        </div>\r\n\r\n        <div className='card-footer'>\r\n          <div className='text-center'>\r\n            {\r\n              <a title='Search on Ballotpedia' className='btn btn-link' href={`https://ballotpedia.org/wiki/index.php?search=${searchName}`} target='_blank' rel='noopener noreferrer'>\r\n                <Icon icon='vote-yea' size='2x' />\r\n              </a>\r\n            }\r\n\r\n            {\r\n              official.emails && official.emails.length > 0 &&\r\n              <a title='Send Email' className='btn btn-link' href={`mailto:${official.emails[0]}`}>\r\n                <Icon icon='envelope' size='2x' />\r\n              </a>\r\n            }\r\n\r\n            {\r\n              official.phones && official.phones.length > 0 &&\r\n                <a title={`Call: ${official.phones[0]}`} className='btn btn-link' href={`tel://${official.phones[0]}`}>\r\n                  <Icon icon='phone' size='2x' />\r\n                </a>\r\n            }\r\n\r\n            {\r\n              official.address && official.address.length > 0 &&\r\n              <span title='View on Map' className='btn btn-link' onClick={() => this.mapAddress(official.address[0]) }>\r\n                <Icon icon='map-marker-alt' size='2x' />\r\n              </span>\r\n            }\r\n\r\n            {\r\n              official.urls && official.urls.length > 0 &&\r\n                <a title={`Visit website: ${official.urls[0]}`} className='btn btn-link' href={official.urls[0]} target='_blank' rel='noopener noreferrer'>\r\n                  <Icon icon='link' size='2x' />\r\n                </a>\r\n            }\r\n\r\n            {\r\n              official.channels && official.channels.length > 0 &&\r\n              official.channels.map(channel => {\r\n                let icon = null\r\n                let url = null\r\n                let appUrl = null\r\n\r\n                switch (channel.type) {\r\n                  case 'Facebook':\r\n                    icon = <Icon icon={['fab', 'facebook']} size='2x' />\r\n                    url = `https://fb.me/${channel.id}`\r\n                    // Have to do extra work to convert page name to page ID; not now\r\n                    // appUrl = `fb://profile?id=${channel.id}`\r\n                    appUrl = url\r\n                    break;\r\n                  case 'Twitter':\r\n                    icon = <Icon icon={['fab', 'twitter']} size='2x' />\r\n                    url = `https://twitter.com/${channel.id}`\r\n                    appUrl = `twitter://user?screen_name=${channel.id}`\r\n                    break;\r\n                  case 'YouTube':\r\n                    // Sometimes it's a channel ID instead. Not a quick way to determine channel/user without Youtube API. Avoiding for now.\r\n                    icon = <Icon icon={['fab', 'youtube']} size='2x' />\r\n                    url = `https://youtube.com/user/${channel.id}`\r\n                    appUrl = url\r\n                    break;\r\n                  default:\r\n                    icon = null\r\n                }\r\n\r\n                return (\r\n                  <span key={channel.type + channel.id}>\r\n                      {\r\n                        icon &&\r\n                        <a title={`${channel.type}: ${channel.id}`} className='btn btn-link' key={channel.type + channel.id} href={/Mobi|Android/i.test(navigator.userAgent) ? appUrl : url} target='_blank' rel='noopener noreferrer'>\r\n                          {icon}\r\n                        </a>\r\n                      }\r\n                  </span>\r\n                )\r\n              })\r\n            }\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","/*\n  App: WhoGoverns.me\n  Author: J.R. Mathis <https://github.com/mathiscode/whogoverns.me>\n  License: See LICENSE.md\n\n  Description:\n    This app pulls Google Civic data to assist citizens in contacting their representatives.\n*/\n\nimport React, { Component } from 'react'\nimport { Helmet } from 'react-helmet'\nimport { FontAwesomeIcon as Icon } from '@fortawesome/react-fontawesome'\nimport { Fab, Action } from 'react-tiny-fab'\nimport 'react-tiny-fab/dist/styles.css'\n\nimport keys from './config/keys.json'\nimport Google from './lib/google-api'\n\nimport Navbar from './components/Navbar'\nimport LoadingSpinner from './components/LoadingSpinner'\nimport AddressBar from './components/AddressBar'\nimport OfficialCard from './components/OfficialCard'\n\nconst MapsAPIUrl = `https://maps.googleapis.com/maps/api/js?key=${keys.PLACES_API_KEY}&libraries=places`\n\nclass App extends Component {\n  state = {\n    isLoading: false,\n    showAddressBar: false,\n    representatives: null\n  }\n\n  componentDidMount = () => {\n    let interval;\n    const checkGMapsLoaded = () => {\n      if (window.google) {\n        this.setState({ showAddressBar: true }, () => {\n          document.querySelector('.location-search-input').focus()\n          document.querySelector('.location-search-input').addEventListener('focus', e => {\n            e.target.select()\n          })\n        })\n\n        clearInterval(interval)\n      }\n    }\n\n    interval = setInterval(checkGMapsLoaded, 100)\n  }\n\n  onChange = async (address, latLng) => {\n    // console.log(address, latLng)\n\n    try {\n      this.setState({ isLoading: true, representatives: null })\n      let results = await Google.representatives({ address })\n\n      let divisions = []\n      Object.values(results.data.divisions).forEach(division => {\n        divisions.push({ name: division.name, offices: division.officeIndices })\n      })\n\n      this.setState({\n        isLoading: false,\n        representatives: { divisions, offices: results.data.offices, officials: results.data.officials }\n      })\n\n      document.querySelector('.address-search-container').classList.add('done')\n      document.querySelector('.location-search-input').blur()\n\n      document.title = `Who Governs Me? • ${address}`\n    } catch (e) {\n      console.error(e)\n    }\n  }\n\n  scrollToTop = () => {\n    window.scrollTo(0, 0)\n  }\n\n  render() {\n    keys.GOOGLE_ANALYTICS_TRACKING_ID = process.env.GOOGLE_ANALYTICS_TRACKING_ID || keys.GOOGLE_ANALYTICS_TRACKING_ID || ''\n\n    const actionStyle = {\n      backgroundColor: '#2222aa'\n    }\n\n    return (\n      <>\n        <Helmet>\n          <script src={MapsAPIUrl}></script>\n\n          {\n            keys.ADSENSE_DATA_AD_CLIENT &&\n            <script data-ad-client={keys.ADSENSE_DATA_AD_CLIENT} async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n          }\n\n          {\n            keys.GOOGLE_ANALYTICS_TRACKING_ID &&\n              <script async src={`https://www.googletagmanager.com/gtag/js?id=${keys.GOOGLE_ANALYTICS_TRACKING_ID}`}></script>\n          }\n\n          {\n            keys.GOOGLE_ANALYTICS_TRACKING_ID &&\n            <script>\n              {\n                `window.dataLayer = window.dataLayer || [];\n                function gtag(){dataLayer.push(arguments);}\n                gtag('js', new Date());\n                gtag('config', '${keys.GOOGLE_ANALYTICS_TRACKING_ID}');\n              `}\n            </script>\n          }\n        </Helmet>\n        \n        <Navbar />\n\n        <div className='container address-search-container'>\n          {\n            this.state.showAddressBar &&\n            <>\n              <AddressBar \n                onChange={this.onChange}\n              />\n            </>\n          }\n        </div>\n        \n        <div className='container search-results-wrapper'>\n          {\n            this.state.isLoading && <LoadingSpinner />\n          }\n\n          {\n            this.state.representatives &&\n            <div className='row'>\n              <div className='col'>\n                {\n                  this.state.representatives.divisions.map(division => {\n                    if (!division.offices || division.offices.length === 0) return null\n\n                    let safeDivisionName = division.name.replace(/([' | ])+/g, '_')\n\n                    return (\n                      <section key={division.name} id={'SECTION_' + safeDivisionName}>\n                        <div className='card mt-4'>\n                          <div className='card-header bg-dark text-white'>\n                            <h3>\n                              <Icon icon='landmark' />\n                              <span style={{ marginLeft: '20px' }}>{division.name !== 'United States' ? division.name : 'Federal'}</span>\n                            </h3>\n                          </div>\n                          \n                          <div id={safeDivisionName} className='card-body collapse show'>\n                            <div className='card-deck'>\n                              {\n                                division.offices && division.offices.map(officeIndex => {\n                                  const office = this.state.representatives.offices[officeIndex]\n                                  const officials = office.officialIndices.map(officialIndex => this.state.representatives.officials[officialIndex])\n\n                                  return (\n                                    <React.Fragment key={officeIndex}>\n                                      \n                                        {\n                                          officials.map(official => {\n                                            return (\n                                              <OfficialCard key={official.name + Math.random()} office={office} official={official} />\n                                            )\n                                          })\n                                        }\n                                      \n                                    </React.Fragment>\n                                  )\n                                })\n                              }\n                            </div>\n                          </div>\n                        </div>\n                      </section>\n                    )\n                  })\n                }\n              </div>\n            </div>\n          }\n\n          {/* <pre>{JSON.stringify(this.state.representatives, null, 2)}</pre> */}\n        </div>\n\n        <footer className='footer mt-auto py-3'>\n          <div className='container'>\n            <a href='https://github.com/mathiscode/whogoverns.me' target='_blank' rel='noopener noreferrer'>Made with <Icon icon='heart' color='#d00' /> by J.R. Mathis</a>\n            <small className='float-right'><em>Data provided by <a href='https://developers.google.com/civic-information' target='_blank' rel='noopener noreferrer'>Google Civic Information</a></em></small>\n          </div>\n        </footer>\n\n        <Fab\n          alwaysShowTitle={true}\n          event='click'\n          icon={<Icon icon='bars' />}\n          mainButtonStyles={{ backgroundColor: '#aa0000' }}\n          children={\n            [\n              <Action text='Search' style={actionStyle}\n                onClick={() => {\n                  this.scrollToTop()\n                  document.querySelector('.location-search-input').focus()\n                }}\n              >\n                <Icon icon='search' />\n              </Action>,\n\n              <Action text='Register to Vote' style={actionStyle} onClick={() => window.open('https://www.vote.org/register-to-vote/', '_blank')}><Icon icon='vote-yea' /></Action>,\n              <Action text='Buy me a beer' style={actionStyle} onClick={() => window.open('https://beerpay.io/mathiscode/whogoverns.me', '_blank')}><Icon icon='beer' /></Action>\n            ]\n          }\n        />\n      </>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/wgm-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'WhoGoverns.me Service Worker ready!'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { fab } from '@fortawesome/free-brands-svg-icons'\n\nimport App from './App'\n\nimport 'bootstrap/dist/css/bootstrap.css'\nimport './index.scss'\nimport 'animate.css'\n\nimport * as serviceWorker from './serviceWorker'\n\n// Setup FontAwesome Library\nimport {\n  faAngleDoubleUp, \n  faBars, \n  faEnvelope, \n  faGavel, \n  faHeart, \n  faLink, \n  faMapMarkerAlt, \n  faPhone, \n  faGlobeAmericas, \n  faDemocrat, \n  faRepublican, \n  faVoteYea, \n  faWindowMinimize, \n  faBeer, \n  faSearch,\n  faLandmark,\n  faCity\n} from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(\n  fab,\n  faAngleDoubleUp,\n  faBars,\n  faEnvelope,\n  faGavel,\n  faHeart,\n  faLink,\n  faMapMarkerAlt,\n  faPhone,\n  faGlobeAmericas,\n  faDemocrat,\n  faRepublican,\n  faVoteYea,\n  faWindowMinimize,\n  faBeer,\n  faSearch,\n  faLandmark,\n  faCity\n)\n\nReactDOM.render(<App />, document.getElementById('root'))\n\nserviceWorker.register()","module.exports = __webpack_public_path__ + \"static/media/default-photo.447bb7f2.jpg\";"],"sourceRoot":""}