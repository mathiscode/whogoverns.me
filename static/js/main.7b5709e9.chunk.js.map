{"version":3,"sources":["assets/images/default-photo.jpg","lib/google-api.js","components/Navbar.js","components/LoadingSpinner.js","components/AddressBar.js","components/OfficialCard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","CIVIC_API_PARAMS","key","process","GEOCODE_API_PARAMS","API","client","axios","create","getCity","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","latitude","longitude","wrap","_context","prev","next","abrupt","get","params","objectSpread","latlng","concat","stop","_x","_x2","apply","this","arguments","representatives","_ref2","_callee2","options","_context2","_x3","voterInfo","_ref3","_callee3","_context3","_x4","topCities","Navbar","props","urlParams","URLSearchParams","window","location","search","react_default","createElement","id","className","react_fontawesome_index_es","icon","map","city","href","style","marginLeft","LoadingSpinner","styled_spinkit_esm","size","AddressBar","state","address","handleChange","localStorage","removeItem","_this","setState","handleSelect","setItem","history","pushState","path","origin","geocodeByAddress","then","results","getLatLng","latLng","onChange","catch","error","console","getItem","dist_default","value","onSelect","searchOptions","componentRestrictions","country","classNames","input","autocompleteContainer","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","suggestion","active","backgroundColor","cursor","borderRadius","padding","assign","Math","random","toString","description","Component","OfficialCard","mapAddress","formattedAddress","line1","line2","line3","zip","encodedAddress","encodeURIComponent","mapUrl","open","searchName","_this2","_this$props","office","official","name","party","officeName","proxiedPhotoUrl","photoUrl","includes","replace","photos","defaultPhoto","push","Array","isArray","visibility_sensor_default","umd_default","src","loader","color","length","phones","Fragment","title","target","rel","emails","onClick","urls","channels","channel","url","appUrl","type","test","navigator","userAgent","MapsAPIUrl","App","isLoading","showAddressBar","componentDidMount","interval","setInterval","google","document","querySelector","focus","addEventListener","e","select","clearInterval","fetch","res","json","data","country_code","alert","err","log","checkFABState","openFAB","classList","contains","remove","add","divisions","usa","Google","sent","values","forEach","division","offices","officeIndices","find","div","filter","unshift","officials","blur","t0","scrollToTop","scrollTo","actionStyle","Helmet","async","AddressBar_AddressBar","safeDivisionName","officeIndex","officialIndices","officialIndex","OfficialCard_OfficialCard","react_tiny_fab_esm","alwaysShowTitle","event","mainButtonStyles","children","text","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","library","fab","faAngleDoubleUp","faBars","faEnvelope","faGavel","faHeart","faLink","faMapMarkerAlt","faPhone","faGlobeAmericas","faDemocrat","faRepublican","faVoteYea","faWindowMinimize","faBeer","faSearch","faLandmark","faCity","ReactDOM","render","src_App","getElementById","URL","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6SCQlCC,EAAmB,CAAEC,IANLC,2CAOhBC,EAAqB,CAAEF,IANLC,2CAOlBE,EAAM,GAENC,SAASC,EAAMC,OAAO,IAa5BH,EAAII,QAAJ,eAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAc,SAAAC,EAAOC,EAAUC,GAAjB,OAAAL,EAAAC,EAAAK,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAG,OAAA,SACLjB,EAAOkB,IApBS,oDAoBa,CAClCC,OAAOd,OAAAe,EAAA,EAAAf,CAAA,GACFP,EADC,CAEJuB,OAAM,GAAAC,OAAKX,EAAL,MAAAW,OAAkBV,QAJhB,wBAAAE,EAAAS,SAAAb,MAAd,gBAAAc,EAAAC,GAAA,OAAArB,EAAAsB,MAAAC,KAAAC,YAAA,GASA7B,EAAI8B,gBAAJ,eAAAC,EAAAzB,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAsB,SAAAsB,EAAOC,GAAP,OAAAzB,EAAAC,EAAAK,KAAA,SAAAoB,GAAA,cAAAA,EAAAlB,KAAAkB,EAAAjB,MAAA,cAAAiB,EAAAhB,OAAA,SACbjB,EAAOkB,IAAP,GAAAI,OA9Bc,0CA8Bd,oBAAgD,CACrDH,OAAOd,OAAAe,EAAA,EAAAf,CAAA,GACFV,EACAqC,MAJa,wBAAAC,EAAAV,SAAAQ,MAAtB,gBAAAG,GAAA,OAAAJ,EAAAJ,MAAAC,KAAAC,YAAA,GASA7B,EAAIoC,UAAJ,eAAAC,EAAA/B,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAgB,SAAA4B,EAAOL,GAAP,OAAAzB,EAAAC,EAAAK,KAAA,SAAAyB,GAAA,cAAAA,EAAAvB,KAAAuB,EAAAtB,MAAA,cAAAsB,EAAArB,OAAA,SACPjB,EAAOkB,IAAP,GAAAI,OAvCc,0CAuCd,cAA0C,CAC/CH,OAAOd,OAAAe,EAAA,EAAAf,CAAA,GACFV,EACAqC,MAJO,wBAAAM,EAAAf,SAAAc,MAAhB,gBAAAE,GAAA,OAAAH,EAAAV,MAAAC,KAAAC,YAAA,GASe7B,QCjDTyC,EAAY,CAChB,eACA,kBACA,eAGa,SAASC,EAAOC,GAC7B,IAAMC,EAAY,IAAIC,gBAAgBC,OAAOC,SAASC,QAEtD,OACEC,EAAAxC,EAAAyC,cAAA,OAAKC,GAAG,SAASC,UAAU,iGACzBH,EAAAxC,EAAAyC,cAAA,UAAQE,UAAU,iFAChBH,EAAAxC,EAAAyC,cAACG,EAAA,EAAD,CAAMC,KAAK,UACXL,EAAAxC,EAAAyC,cAAA,QAAME,UAAU,aAAhB,oBAGFH,EAAAxC,EAAAyC,cAAA,OAAKC,GAAG,aAAaC,UAAU,4BAC7BH,EAAAxC,EAAAyC,cAAA,MAAIE,UAAU,8DAGVX,EAAUc,IAAI,SAAAC,GACZ,OACEP,EAAAxC,EAAAyC,cAAA,MAAIrD,IAAK2D,EAAMJ,UAAS,YAAA7B,OAAcqB,EAAUzB,IAAI,aAAeqC,EAAO,SAAW,KACnFP,EAAAxC,EAAAyC,cAAA,KAAGE,UAAU,wBAAwBK,KAAI,YAAAlC,OAAciC,IACrDP,EAAAxC,EAAAyC,cAACG,EAAA,EAAD,CAAMC,KAAK,SACXL,EAAAxC,EAAAyC,cAAA,QAAMQ,MAAO,CAAEC,WAAY,SAAWH,sBCzB3C,SAASI,EAAejB,GACrC,OACEM,EAAAxC,EAAAyC,cAACW,EAAA,EAAD,CAAUC,KAAMnB,EAAMmB,MAAQ,2BCAbC,6MACnBC,MAAQ,CAAEC,QAAS,QAEnBC,aAAe,SAAAD,IACbA,EAAsB,KAAZA,EAAiBA,EAAU,OACvBE,aAAaC,WAAW,WACtCC,EAAKC,SAAS,CAAEL,eAGlBM,aAAe,SAAAN,GAIb,GAHAI,EAAKC,SAAS,CAAEL,YAChBE,aAAaK,QAAQ,UAAWP,GAE5BnB,OAAO2B,QAAQC,UAAW,CAC5B,IAAIC,EAAO7B,OAAOC,SAAS6B,OAAhB,YAAArD,OAAqC0C,GAChDnB,OAAO2B,QAAQC,UAAU,CAAEC,QAAQ,GAAIA,GAGzCE,2BAAiBZ,GACda,KAAK,SAAAC,GAAO,OAAIC,oBAAUD,EAAQ,MAClCD,KAAK,SAAAG,GAAM,OAAIZ,EAAK1B,MAAMuC,SAASjB,EAASgB,KAC5CE,MAAM,SAAAC,GAAK,OAAIC,QAAQD,MAAMA,yFAIhC,IAAMxC,EAAY,IAAIC,gBAAgBC,OAAOC,SAASC,QACtD,OAAIJ,EAAUzB,IAAI,WAAmBS,KAAK2C,aAAa3B,EAAUzB,IAAI,YACjEgD,aAAamB,QAAQ,WAAmB1D,KAAK2C,aAAaJ,aAAamB,QAAQ,iBAAnF,mCAIA,OACErC,EAAAxC,EAAAyC,cAACqC,EAAA9E,EAAD,CACE+E,MAAO5D,KAAKoC,MAAMC,SAAWE,aAAamB,QAAQ,YAAc,GAChEJ,SAAUtD,KAAKsC,aACfuB,SAAU7D,KAAK2C,aACfmB,cAAe,CACbC,sBAAuB,CAAEC,QAAS,OAEpCC,WAAY,CACVC,MAAO,mCACPC,sBAAuB,kCAGxB,SAAA1F,GAAA,IAAG2F,EAAH3F,EAAG2F,cAAeC,EAAlB5F,EAAkB4F,YAAaC,EAA/B7F,EAA+B6F,uBAAwBC,EAAvD9F,EAAuD8F,QAAvD,OACClD,EAAAxC,EAAAyC,cAAA,WACED,EAAAxC,EAAAyC,cAAA,QACM8C,EAAc,CAChBI,YAAa,uBACbhD,UAAW,2BAGfH,EAAAxC,EAAAyC,cAAA,KAAGE,UAAU,yBAAwBH,EAAAxC,EAAAyC,cAAA,0DACrCD,EAAAxC,EAAAyC,cAAA,OAAKE,UAAU,mCACZ+C,GAAWlD,EAAAxC,EAAAyC,cAAA,yBACX+C,EAAY1C,IAAI,SAAA8C,GACf,IAAMjD,EAAYiD,EAAWC,OACzB,0BACA,kBAEE5C,EAAQ2C,EAAWC,OACrB,CAAEC,gBAAiB,OAAQC,OAAQ,UAAWC,aAAc,MAAOC,QAAS,OAC5E,CAAEH,gBAAiB,UAAWC,OAAQ,WAC1C,OACEvD,EAAAxC,EAAAyC,cAAA,MAAA5C,OAAAqG,OAAA,CAAK9G,IAAK+G,KAAKC,SAASC,SAAS,KAC3BZ,EAAuBG,EAAY,CACrCjD,YACAM,WAGFT,EAAAxC,EAAAyC,cAAA,YAAOmD,EAAWU,2BAtEEC,gECEnBC,6MACnBC,WAAa,SAACjD,GACZ,IAAMkD,EAAgB,GAAA5F,OAAM0C,EAAQmD,OAAS,GAAvB,KAAA7F,OAA6B0C,EAAQoD,OAAS,GAA9C,KAAA9F,OAAoD0C,EAAQqD,OAAS,GAArE,KAAA/F,OAA2E0C,EAAQT,MAAQ,GAA3F,KAAAjC,OAAiG0C,EAAQD,OAAS,GAAlH,KAAAzC,OAAwH0C,EAAQsD,KAAO,IACvJC,EAAiBC,mBAAmBN,GACpCO,EAAM,mDAAAnG,OAAsDiG,GAGlE1E,OAAO6E,KAAKD,4EAGJ,IAIJE,EAJIC,EAAAjG,KAAAkG,EACqBlG,KAAKe,MAA1BoF,EADAD,EACAC,OAAQC,EADRF,EACQE,SAIhB,OAAQA,EAASC,MACf,IAAK,kBACHL,EAAa,eAAgB,MAC/B,QACEA,EAAaI,EAASC,KAG1B,IAAMC,EACJF,EAASE,MACY,YAAnBF,EAASE,MAAsB,gBAAkBF,EAASE,MACxD,gBAEFC,EAAaJ,EAAOE,KACxB,OAAQF,EAAOE,MACb,IAAK,oBACHE,EAAa,qBAAsB,MACrC,IAAK,sBACHA,EAAa,yBAA0B,MACzC,IAAK,mBACHA,EAAa,qBAIjB,IACIC,EADAC,EAAWL,EAASK,SAKP,mFAAbA,IAA+FA,EAAW,4GAC7F,oFAAbA,IAAgGA,EAAW,0KAI3GA,GAAYA,EAASC,SAAS,aAChCD,EAAWA,EAASE,QAAQ,UAAW,YACvCH,EAAe,8CAAA7G,OAAiDyG,EAASK,WAIvEA,GAAYA,EAASC,SAAS,2BAA0BD,EAAWD,GAEvE,IAAMI,EAASH,EAAW,CAACA,GAAYI,IAIvC,OAHIL,GAAiBI,EAAOE,KAAKN,GAC7BO,MAAMC,QAAQJ,IAASA,EAAOE,KAAKD,KAGrCxF,EAAAxC,EAAAyC,cAAA,OAAKE,UAAU,2BACbH,EAAAxC,EAAAyC,cAAA,OAAKE,UAAU,eACbH,EAAAxC,EAAAyC,cAAC2F,EAAApI,EAAD,KACEwC,EAAAxC,EAAAyC,cAAC4F,EAAArI,EAAD,CACE2C,UAAU,kDACV2F,IAAKP,EACLQ,OAAQ/F,EAAAxC,EAAAyC,cAAC4F,EAAArI,EAAD,CAAK2C,UAAU,kDAAkD2F,IAAKN,SAIlFxF,EAAAxC,EAAAyC,cAAA,KAAGE,UAAU,cACXH,EAAAxC,EAAAyC,cAAA,QAAME,UAAU,iBAAiB4E,EAASC,MAC1ChF,EAAAxC,EAAAyC,cAAA,WACAD,EAAAxC,EAAAyC,cAAA,QAAME,UAAU,eAAe+E,GAC/BlF,EAAAxC,EAAAyC,cAAA,WAEAD,EAAAxC,EAAAyC,cAAA,QAAME,UAAU,gBACZ8E,EAAMI,SAAS,eAAiBrF,EAAAxC,EAAAyC,cAACG,EAAA,EAAD,CAAMC,KAAK,aAAa2F,MAAM,YAC9Df,EAAMI,SAAS,aAAerF,EAAAxC,EAAAyC,cAACG,EAAA,EAAD,CAAMC,KAAK,WAAW2F,MAAM,YAC5DhG,EAAAxC,EAAAyC,cAAA,QAAME,UAAU,aAAa8E,MAMnCjF,EAAAxC,EAAAyC,cAAA,OAAKE,UAAU,aACbH,EAAAxC,EAAAyC,cAAA,OAAKE,UAAU,OACbH,EAAAxC,EAAAyC,cAAA,OAAKE,UAAU,OACbH,EAAAxC,EAAAyC,cAAA,eAEI8E,EAAS/D,SAAW+D,EAAS/D,QAAQiF,OAAS,GAC9CjG,EAAAxC,EAAAyC,cAAA,SAEoC,KAA9B8E,EAAS/D,QAAQ,GAAGmD,OAAgBnE,EAAAxC,EAAAyC,cAAA,YAAO8E,EAAS/D,QAAQ,GAAGmD,MAAMnE,EAAAxC,EAAAyC,cAAA,YACvC,KAA9B8E,EAAS/D,QAAQ,GAAGoD,OAAgBpE,EAAAxC,EAAAyC,cAAA,YAAO8E,EAAS/D,QAAQ,GAAGoD,MAAMpE,EAAAxC,EAAAyC,cAAA,YACvC,KAA9B8E,EAAS/D,QAAQ,GAAGqD,OAAgBrE,EAAAxC,EAAAyC,cAAA,YAAO8E,EAAS/D,QAAQ,GAAGqD,MAAMrE,EAAAxC,EAAAyC,cAAA,WAAjC,KACtCD,EAAAxC,EAAAyC,cAAA,YAAO8E,EAAS/D,QAAQ,GAAGT,KAA3B,KAAmCwE,EAAS/D,QAAQ,GAAGD,MAAvD,IAA+DgE,EAAS/D,QAAQ,GAAGsD,IAAItE,EAAAxC,EAAAyC,cAAA,aAM3F8E,EAASmB,QAAUnB,EAASmB,OAAOD,OAAS,GAC5CjG,EAAAxC,EAAAyC,cAAAD,EAAAxC,EAAA2I,SAAA,KACEnG,EAAAxC,EAAAyC,cAACG,EAAA,EAAD,CAAMC,KAAK,UACXL,EAAAxC,EAAAyC,cAAA,KAAGE,UAAU,YAAYK,KAAI,OAAAlC,OAASyG,EAASmB,OAAO,KAAOnB,EAASmB,OAAO,IAC7ElG,EAAAxC,EAAAyC,cAAA,gBAUZD,EAAAxC,EAAAyC,cAAA,OAAKE,UAAU,eACbH,EAAAxC,EAAAyC,cAAA,OAAKE,UAAU,eAEXH,EAAAxC,EAAAyC,cAAA,KAAGmG,MAAM,wBAAwBjG,UAAU,eAAeK,KAAI,iDAAAlC,OAAmDqG,GAAc0B,OAAO,SAASC,IAAI,uBACjJtG,EAAAxC,EAAAyC,cAACG,EAAA,EAAD,CAAMC,KAAK,WAAWQ,KAAK,QAK7BkE,EAASwB,QAAUxB,EAASwB,OAAON,OAAS,GAC5CjG,EAAAxC,EAAAyC,cAAA,KAAGmG,MAAM,aAAajG,UAAU,eAAeK,KAAI,UAAAlC,OAAYyG,EAASwB,OAAO,KAC7EvG,EAAAxC,EAAAyC,cAACG,EAAA,EAAD,CAAMC,KAAK,WAAWQ,KAAK,QAK7BkE,EAASmB,QAAUnB,EAASmB,OAAOD,OAAS,GAC1CjG,EAAAxC,EAAAyC,cAAA,KAAGmG,MAAK,SAAA9H,OAAWyG,EAASmB,OAAO,IAAM/F,UAAU,eAAeK,KAAI,SAAAlC,OAAWyG,EAASmB,OAAO,KAC/FlG,EAAAxC,EAAAyC,cAACG,EAAA,EAAD,CAAMC,KAAK,QAAQQ,KAAK,QAK5BkE,EAAS/D,SAAW+D,EAAS/D,QAAQiF,OAAS,GAC9CjG,EAAAxC,EAAAyC,cAAA,QAAMmG,MAAM,cAAcjG,UAAU,eAAeqG,QAAS,kBAAM5B,EAAKX,WAAWc,EAAS/D,QAAQ,MACjGhB,EAAAxC,EAAAyC,cAACG,EAAA,EAAD,CAAMC,KAAK,iBAAiBQ,KAAK,QAKnCkE,EAAS0B,MAAQ1B,EAAS0B,KAAKR,OAAS,GACtCjG,EAAAxC,EAAAyC,cAAA,KAAGmG,MAAK,kBAAA9H,OAAoByG,EAAS0B,KAAK,IAAMtG,UAAU,eAAeK,KAAMuE,EAAS0B,KAAK,GAAIJ,OAAO,SAASC,IAAI,uBACnHtG,EAAAxC,EAAAyC,cAACG,EAAA,EAAD,CAAMC,KAAK,OAAOQ,KAAK,QAK3BkE,EAAS2B,UAAY3B,EAAS2B,SAAST,OAAS,GAChDlB,EAAS2B,SAASpG,IAAI,SAAAqG,GACpB,IAAItG,EAAO,KACPuG,EAAM,KACNC,EAAS,KAEb,OAAQF,EAAQG,MACd,IAAK,WACHzG,EAAOL,EAAAxC,EAAAyC,cAACG,EAAA,EAAD,CAAMC,KAAM,CAAC,MAAO,YAAaQ,KAAK,OAI7CgG,EAHAD,EAAG,iBAAAtI,OAAoBqI,EAAQzG,IAI/B,MACF,IAAK,UACHG,EAAOL,EAAAxC,EAAAyC,cAACG,EAAA,EAAD,CAAMC,KAAM,CAAC,MAAO,WAAYQ,KAAK,OAC5C+F,EAAG,uBAAAtI,OAA0BqI,EAAQzG,IACrC2G,EAAM,8BAAAvI,OAAiCqI,EAAQzG,IAC/C,MACF,IAAK,UAEHG,EAAOL,EAAAxC,EAAAyC,cAACG,EAAA,EAAD,CAAMC,KAAM,CAAC,MAAO,WAAYQ,KAAK,OAE5CgG,EADAD,EAAG,4BAAAtI,OAA+BqI,EAAQzG,IAE1C,MACF,QACEG,EAAO,KAGX,OACEL,EAAAxC,EAAAyC,cAAA,QAAMrD,IAAK+J,EAAQG,KAAOH,EAAQzG,IAE5BG,GACAL,EAAAxC,EAAAyC,cAAA,KAAGmG,MAAK,GAAA9H,OAAKqI,EAAQG,KAAb,MAAAxI,OAAsBqI,EAAQzG,IAAMC,UAAU,eAAevD,IAAK+J,EAAQG,KAAOH,EAAQzG,GAAIM,KAAM,gBAAgBuG,KAAKC,UAAUC,WAAaJ,EAASD,EAAKP,OAAO,SAASC,IAAI,uBACtLjG,gBA5Le0D,aCepCmD,EAAU,+CAAA5I,OAAkDzB,0CAAlD,qBAwODsK,6MArObpG,MAAQ,CACNqG,WAAW,EACXC,gBAAgB,EAChBxI,gBAAiB,QAGnByI,kBAAoB,WAClB,IAAIC,EAcJA,EAAWC,YAbc,WACnB3H,OAAO4H,SACTrG,EAAKC,SAAS,CAAEgG,gBAAgB,GAAQ,WACtCK,SAASC,cAAc,0BAA0BC,QACjDF,SAASC,cAAc,0BAA0BE,iBAAiB,QAAS,SAAAC,GACzEA,EAAEzB,OAAO0B,aAIbC,cAAcT,KAIuB,KAEzCU,MAAM,+BACHpG,KAAK,SAAAqG,GAAG,OAAIA,EAAIC,SAChBtG,KAAK,SAAAuG,GACsB,OAAtBA,EAAKC,cACPxI,OAAOyI,MAAM,wEAGhBpG,MAAM,SAAAqG,GACLnG,QAAQoG,IAAID,KAGhBf,YAAYpG,EAAKqH,cAAe,QAGlCA,cAAgB,WAEd,IAAMC,EAAUhB,SAASC,cAAc,QACnCe,EAAQC,UAAUC,SAAS,SAASlB,SAASC,cAAc,YAAYgB,UAAUE,OAAO,oBAAqB,oBAAqB,kBAAmB,mBACrJH,EAAQC,UAAUC,SAAS,WAAWlB,SAASC,cAAc,YAAYgB,UAAUG,IAAI,oBAAqB,oBAAqB,kBAAmB,sBAG1J7G,+CAAW,SAAAvE,EAAOsD,EAASgB,GAAhB,IAAAF,EAAAiH,EAAAC,EAAA,OAAAzL,EAAAC,EAAAK,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAIPqD,EAAKC,SAAS,CAAE+F,WAAW,EAAMvI,gBAAiB,OAJ3Cf,EAAAE,KAAA,EAKaiL,EAAOpK,gBAAgB,CAAEmC,YALtC,OAKHc,EALGhE,EAAAoL,KAOHH,EAAY,GAChB1L,OAAO8L,OAAOrH,EAAQsG,KAAKW,WAAWK,QAAQ,SAAAC,GAC5CN,EAAUtD,KAAK,CAAET,KAAMqE,EAASrE,KAAMsE,QAASD,EAASE,kBAGpDP,EAAMD,EAAUS,KAAK,SAAAC,GAAG,MAAiB,kBAAbA,EAAIzE,QACtC+D,EAAYA,EAAUW,OAAO,SAAAD,GAAG,MAAiB,kBAAbA,EAAIzE,QAC9B2E,QAAQX,GAElB5H,EAAKC,SAAS,CACZ+F,WAAW,EACXvI,gBAAiB,CAAEkK,YAAWO,QAASxH,EAAQsG,KAAKkB,QAASM,UAAW9H,EAAQsG,KAAKwB,aAGvFlC,SAASC,cAAc,6BAA6BgB,UAAUG,IAAI,QAClEpB,SAASC,cAAc,0BAA0BkC,OAEjDnC,SAAStB,MAAT,0BAAA9H,OAAsC0C,GAxB/BlD,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAgM,GAAAhM,EAAA,SA0BPsE,QAAQD,MAARrE,EAAAgM,IA1BO,yBAAAhM,EAAAS,SAAAb,EAAA,4EA8BXqM,YAAc,WACZlK,OAAOmK,SAAS,EAAG,4EAGZ,IAAApF,EAAAjG,KACDsL,EAAc,CAClB3G,gBAAiB,WAGnB,OACEtD,EAAAxC,EAAAyC,cAAAD,EAAAxC,EAAA2I,SAAA,KACEnG,EAAAxC,EAAAyC,cAACiK,EAAA,OAAD,KACElK,EAAAxC,EAAAyC,cAAA,UAAQ6F,IAAKoB,IAITlH,EAAAxC,EAAAyC,cAAA,UAAQkK,OAAK,EAACrE,IAAG,+CAAAxH,OAAiDzB,oBAKpEmD,EAAAxC,EAAAyC,cAAA,mMAAA3B,OAKsBzB,iBALtB,yBAWJmD,EAAAxC,EAAAyC,cAACR,EAAD,MAEAO,EAAAxC,EAAAyC,cAAA,OAAKE,UAAU,sCACbH,EAAAxC,EAAAyC,cAAA,MAAIE,UAAU,qBAAd,kDACGxB,KAAKoC,MAAMsG,gBAAkBrH,EAAAxC,EAAAyC,cAACU,EAAD,CAAgBE,KAAM,KAEpDlC,KAAKoC,MAAMsG,gBACTrH,EAAAxC,EAAAyC,cAAA,OAAKE,UAAU,4CACbH,EAAAxC,EAAAyC,cAACmK,EAAD,CACEnI,SAAUtD,KAAKsD,aAMzBjC,EAAAxC,EAAAyC,cAAA,OAAKE,UAAU,oCACbH,EAAAxC,EAAAyC,cAAA,MAAIE,UAAU,+DAAd,gEAAuIH,EAAAxC,EAAAyC,cAAA,qCAGrItB,KAAKoC,MAAMqG,WAAapH,EAAAxC,EAAAyC,cAACU,EAAD,MAIxBhC,KAAKoC,MAAMlC,iBACXmB,EAAAxC,EAAAyC,cAAA,OAAKE,UAAU,OACbH,EAAAxC,EAAAyC,cAAA,OAAKE,UAAU,OAEXxB,KAAKoC,MAAMlC,gBAAgBkK,UAAUzI,IAAI,SAAA+I,GACvC,IAAKA,EAASC,SAAuC,IAA5BD,EAASC,QAAQrD,OAAc,OAAO,KAE/D,IAAIoE,EAAmBhB,EAASrE,KAAKM,QAAQ,aAAc,KAE3D,OACEtF,EAAAxC,EAAAyC,cAAA,WAASrD,IAAKyM,EAASrE,KAAM9E,GAAI,WAAamK,GAC5CrK,EAAAxC,EAAAyC,cAAA,OAAKE,UAAU,aACbH,EAAAxC,EAAAyC,cAAA,OAAKE,UAAU,kCACbH,EAAAxC,EAAAyC,cAAA,UACED,EAAAxC,EAAAyC,cAACG,EAAA,EAAD,CAAMC,KAAK,aACXL,EAAAxC,EAAAyC,cAAA,QAAMQ,MAAO,CAAEC,WAAY,SAA6B,kBAAlB2I,EAASrE,KAA2BqE,EAASrE,KAAO,aAI9FhF,EAAAxC,EAAAyC,cAAA,OAAKC,GAAImK,EAAkBlK,UAAU,2BACnCH,EAAAxC,EAAAyC,cAAA,OAAKE,UAAU,aAEXkJ,EAASC,SAAWD,EAASC,QAAQhJ,IAAI,SAAAgK,GACvC,IAAMxF,EAASF,EAAK7D,MAAMlC,gBAAgByK,QAAQgB,GAC5CV,EAAY9E,EAAOyF,gBAAgBjK,IAAI,SAAAkK,GAAa,OAAI5F,EAAK7D,MAAMlC,gBAAgB+K,UAAUY,KAEnG,OACExK,EAAAxC,EAAAyC,cAACD,EAAAxC,EAAM2I,SAAP,CAAgBvJ,IAAK0N,GAGfV,EAAUtJ,IAAI,SAAAyE,GACZ,OACE/E,EAAAxC,EAAAyC,cAACwK,EAAD,CAAc7N,IAAKmI,EAASC,KAAOrB,KAAKC,SAAUkB,OAAQA,EAAQC,SAAUA,kBAuBlH/E,EAAAxC,EAAAyC,cAAA,UAAQE,UAAU,4DAChBH,EAAAxC,EAAAyC,cAAA,OAAKE,UAAU,aACbH,EAAAxC,EAAAyC,cAAA,KAAGO,KAAK,yCAAyC6F,OAAO,SAASC,IAAI,uBAArE,aAAqGtG,EAAAxC,EAAAyC,cAACG,EAAA,EAAD,CAAMC,KAAK,QAAQ2F,MAAM,SAA9H,kBACAhG,EAAAxC,EAAAyC,cAAA,SAAOE,UAAU,eAAcH,EAAAxC,EAAAyC,cAAA,8BAAqBD,EAAAxC,EAAAyC,cAAA,KAAGO,KAAK,kDAAkD6F,OAAO,SAASC,IAAI,uBAA9E,gCAIxDtG,EAAAxC,EAAAyC,cAACyK,EAAA,EAAD,CAaEC,iBAAiB,EACjBC,MAAM,QACNvK,KAAML,EAAAxC,EAAAyC,cAACG,EAAA,EAAD,CAAMC,KAAK,SACjBwK,iBAAkB,CAAEvH,gBAAiB,WACrCwH,SACE,CACE9K,EAAAxC,EAAAyC,cAACyK,EAAA,EAAD,CAAQK,KAAK,SAAStK,MAAOwJ,EAC3BzD,QAAS,WACP5B,EAAKmF,cACLrC,SAASC,cAAc,0BAA0BC,UAGnD5H,EAAAxC,EAAAyC,cAACG,EAAA,EAAD,CAAMC,KAAK,YAGbL,EAAAxC,EAAAyC,cAACyK,EAAA,EAAD,CAAQK,KAAK,mBAAmBtK,MAAOwJ,EAAazD,QAAS,kBAAM3G,OAAO6E,KAAK,yCAA0C,YAAW1E,EAAAxC,EAAAyC,cAACG,EAAA,EAAD,CAAMC,KAAK,cAC/IL,EAAAxC,EAAAyC,cAACyK,EAAA,EAAD,CAAQK,KAAK,gBAAgBtK,MAAOwJ,EAAazD,QAAS,kBAAM3G,OAAO6E,KAAK,yCAA0C,YAAW1E,EAAAxC,EAAAyC,cAACG,EAAA,EAAD,CAAMC,KAAK,qBA7NxI0D,aCZZiH,qBAAcC,QACW,cAA7BpL,OAAOC,SAASoL,UAEe,UAA7BrL,OAAOC,SAASoL,UAEhBrL,OAAOC,SAASoL,SAASC,MACvB,4DAqCN,SAASC,EAAgBC,EAAOC,GAC9BtE,UAAUuE,cACPC,SAASH,GACTxJ,KAAK,SAAA4J,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB5K,QACfiG,UAAUuE,cAAcO,YAI1B1J,QAAQoG,IACN,iHAKE8C,GAAUA,EAAOS,UACnBT,EAAOS,SAASN,KAMlBrJ,QAAQoG,IAAI,sCAGR8C,GAAUA,EAAOU,WACnBV,EAAOU,UAAUP,UAO5BvJ,MAAM,SAAAC,GACLC,QAAQD,MAAM,4CAA6CA,gBC7DjE8J,IAAQnD,IACNoD,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,KAGFC,IAASC,OAAOrN,EAAAxC,EAAAyC,cAACqN,EAAD,MAAS5F,SAAS6F,eAAe,SDjC1C,SAAkBjC,GACvB,GAAI,kBAAmBtE,UAAW,CAGhC,GADkB,IAAIwG,IAAI3Q,GAAwBgD,OAAOC,SAASU,MACpDmB,SAAW9B,OAAOC,SAAS6B,OAIvC,OAGF9B,OAAOgI,iBAAiB,OAAQ,WAC9B,IAAMwD,EAAK,GAAA/M,OAAMzB,GAAN,kBAEPmO,GA+DV,SAAiCK,EAAOC,GAEtCrD,MAAMoD,GACHxJ,KAAK,SAAA4L,GAEJ,IAAMC,EAAcD,EAASE,QAAQzP,IAAI,gBAEnB,MAApBuP,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C7G,UAAUuE,cAAcuC,MAAMjM,KAAK,SAAA4J,GACjCA,EAAasC,aAAalM,KAAK,WAC7BhC,OAAOC,SAASkO,aAKpB5C,EAAgBC,EAAOC,KAG1BpJ,MAAM,WACLE,QAAQoG,IACN,mEApFAyF,CAAwB5C,EAAOC,GAI/BtE,UAAUuE,cAAcuC,MAAMjM,KAAK,WACjCO,QAAQoG,IACN,0CAKJ4C,EAAgBC,EAAOC,MCQ/BC","file":"static/js/main.7b5709e9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/default-photo.447bb7f2.jpg\";","import axios from 'axios'\n\nconst CIVIC_API_KEY = process.env.REACT_APP_GOOGLE_API_KEY\nconst GEOCODE_API_KEY = process.env.REACT_APP_GOOGLE_API_KEY\n\nconst CIVIC_API_ROOT = 'https://www.googleapis.com/civicinfo/v2'\nconst GEOCODE_API_ROOT = 'https://maps.googleapis.com/maps/api/geocode/json'\n\nconst CIVIC_API_PARAMS = { key: CIVIC_API_KEY }\nconst GEOCODE_API_PARAMS = { key: GEOCODE_API_KEY }\nconst API = {}\n\nconst client = axios.create({})\n\n// Used during development\n// client.interceptors.request.use(request => {\n//   console.log('Starting Request', request)\n//   return request\n// })\n\n// client.interceptors.response.use(response => {\n//   console.log('Response:', response)\n//   return response\n// })\n\nAPI.getCity = async (latitude, longitude) => {\n  return client.get(GEOCODE_API_ROOT, {\n    params: {\n      ...GEOCODE_API_PARAMS,\n      latlng: `${latitude}, ${longitude}`\n    }\n  })\n}\n\nAPI.representatives = async (options) => {\n  return client.get(`${CIVIC_API_ROOT}/representatives`, {\n    params: {\n      ...CIVIC_API_PARAMS,\n      ...options\n    }\n  })\n}\n\nAPI.voterInfo = async (options) => {\n  return client.get(`${CIVIC_API_ROOT}/voterinfo`, {\n    params: {\n      ...CIVIC_API_PARAMS,\n      ...options\n    }\n  })\n}\n\nexport default API\n","import React from 'react'\nimport { FontAwesomeIcon as Icon } from '@fortawesome/react-fontawesome'\n\nconst topCities = [\n  'New York, NY',\n  'Los Angeles, CA',\n  'Chicago, IL'\n]\n\nexport default function Navbar(props) {\n  const urlParams = new URLSearchParams(window.location.search)\n\n  return (\n    <nav id='navbar' className='navbar sticky-top navbar-expand-lg navbar-dark bg-dark animate__animated animate__slideInDown'>\n      <button className='navbar-brand navbar-title btn btn-link animate__animated animate__slideInLeft'>\n        <Icon icon='gavel' />\n        <span className='icon-text'>Who Governs Me?</span>\n      </button>\n\n      <div id=\"navbarMenu\" className='collapse navbar-collapse'>\n        <ul className='navbar-nav ml-auto animate__animated animate__slideInRight'>\n\n          {\n            topCities.map(city => {\n              return (\n                <li key={city} className={`nav-item ${urlParams.get('address') === city ? 'active' : '' }`}>\n                  <a className='nav-link btn btn-link' href={`?address=${city}`}>\n                    <Icon icon='city' />\n                    <span style={{ marginLeft: '10px' }}>{city}</span>\n                  </a>\n                </li>\n              )\n            })\n          }\n        </ul>\n      </div>\n    </nav>\n  )\n}\n","import React from 'react'\nimport { CubeGrid } from 'styled-spinkit'\n\nexport default function LoadingSpinner(props) {\n  return (\n    <CubeGrid size={props.size || 128} />\n  )\n}\n","/* global history */\n\nimport React, { Component } from 'react'\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete'\n\nexport default class AddressBar extends Component {\n  state = { address: null }\n\n  handleChange = address => {\n    address = address !== '' ? address : null\n    if (!address) localStorage.removeItem('address')\n    this.setState({ address })\n  }\n\n  handleSelect = address => {\n    this.setState({ address })\n    localStorage.setItem('address', address)\n\n    if (window.history.pushState) {\n      var path = window.location.origin + `?address=${address}`;\n      window.history.pushState({ path }, '', path);\n    }\n    \n    geocodeByAddress(address)\n      .then(results => getLatLng(results[0]))\n      .then(latLng => this.props.onChange(address, latLng))\n      .catch(error => console.error(error))\n  }\n\n  componentDidMount () {\n    const urlParams = new URLSearchParams(window.location.search)\n    if (urlParams.get('address')) return this.handleSelect(urlParams.get('address'))\n    if (localStorage.getItem('address')) return this.handleSelect(localStorage.getItem('address'))\n  }\n\n  render() {\n    return (\n      <PlacesAutocomplete\n        value={this.state.address || localStorage.getItem('address') || ''}\n        onChange={this.handleChange}\n        onSelect={this.handleSelect}\n        searchOptions={{\n          componentRestrictions: { country: 'us' }\n        }}\n        classNames={{\n          input: 'places-search-input form-control',\n          autocompleteContainer: 'search-autocomplete-container'\n        }}\n      >\n        {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n          <div>\n            <input\n              {...getInputProps({\n                placeholder: \"What's your address?\",\n                className: 'location-search-input',\n              })}\n            />\n            <p className=\"text-muted text-right\"><em>Or, just your City and State if you prefer.</em></p>\n            <div className=\"autocomplete-dropdown-container\">\n              {loading && <div>Loading...</div>}\n              {suggestions.map(suggestion => {\n                const className = suggestion.active\n                  ? 'suggestion-item--active'\n                  : 'suggestion-item';\n                // inline style for demonstration purpose\n                const style = suggestion.active\n                  ? { backgroundColor: '#ddd', cursor: 'pointer', borderRadius: '4px', padding: '2px' }\n                  : { backgroundColor: '#ffffff', cursor: 'pointer' };\n                return (\n                  <div key={Math.random().toString(36)}\n                    {...getSuggestionItemProps(suggestion, {\n                      className,\n                      style,\n                    })}\n                  >\n                    <span>{suggestion.description}</span>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        )}\n      </PlacesAutocomplete>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport Img from 'react-image'\nimport VisibilitySensor from 'react-visibility-sensor'\nimport { FontAwesomeIcon as Icon } from '@fortawesome/react-fontawesome'\n\nimport defaultPhoto from '../assets/images/default-photo.jpg'\n\nexport default class OfficialCard extends Component {\n  mapAddress = (address) => {\n    const formattedAddress = `${address.line1 || ''} ${address.line2 || ''} ${address.line3 || ''} ${address.city || ''} ${address.state || ''} ${address.zip || ''}`\n    const encodedAddress = encodeURIComponent(formattedAddress)\n    const mapUrl = `https://www.google.com/maps/search/?api=1&query=${encodedAddress}`\n\n    // console.log(formattedAddress, encodedAddress, mapUrl)\n    window.open(mapUrl)\n  }\n\n  render () {\n    const { office, official } = this.props\n\n    // Some tweaks for best Ballotpedia search results\n    let searchName\n    switch (official.name) {\n      case 'Donald J. Trump':\n        searchName = 'Donald Trump'; break;\n      default:\n        searchName = official.name\n    }\n\n    const party = \n      official.party ?\n        official.party === 'Unknown' ? 'Unknown Party' : official.party\n        : 'Unknown Party'\n\n    let officeName = office.name\n    switch (office.name) {\n      case 'governmentOfficer':\n        officeName = 'Government Officer'; break;\n      case 'legislatorUpperBody':\n        officeName = 'Legislator, Upper Body'; break;\n      case 'headofGovernment':\n        officeName = 'Head of Government'; break;\n      default:\n    }\n\n    let photoUrl = official.photoUrl\n    let proxiedPhotoUrl\n\n    // The White House has high-res images which are slow to load, replace the current ones\n    // Yes, this is crazy hacky. It's going to require manual update when the administration changes, but it's better for UX.\n    if (photoUrl === 'https://www.whitehouse.gov/sites/whitehouse.gov/files/images/45/PE%20Color.jpg') photoUrl = 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRKx6EYhhB26AqqnnfUHX5B3HuLPilvjkKXzWR8-C8G29fOtoUN'\n    if (photoUrl === 'https://www.whitehouse.gov/sites/whitehouse.gov/files/images/45/VPE%20Color.jpg') photoUrl = 'https://upload.wikimedia.org/wikipedia/commons/thumb/b/b9/Mike_Pence_official_Vice_Presidential_portrait.jpg/1200px-Mike_Pence_official_Vice_Presidential_portrait.jpg'\n  \n    // Proxy http images via https to prevent mixed content warnings\n    // Some sites block the request, so we try https version of original url first, then proxy\n    if (photoUrl && photoUrl.includes('http://')) {\n      photoUrl = photoUrl.replace('http://', 'https://')\n      proxiedPhotoUrl = `https://http-securifier.herokuapp.com/?url=${official.photoUrl}`\n    }\n\n    // Images timeout on attempting https, so to speed things up for common domains we hack around the usual order\n    if (photoUrl && photoUrl.includes('bioguide.congress.gov')) photoUrl = proxiedPhotoUrl\n\n    const photos = photoUrl ? [photoUrl] : defaultPhoto\n    if (proxiedPhotoUrl) photos.push(proxiedPhotoUrl)\n    if (Array.isArray(photos)) photos.push(defaultPhoto)\n\n    return (\n      <div className='official-card card mb-4'>\n        <div className='card-header'>\n          <VisibilitySensor>\n            <Img\n              className='img-thumbnail official-profile-image float-left'\n              src={photos}\n              loader={<Img className='img-thumbnail official-profile-image float-left' src={defaultPhoto} />}\n            />\n          </VisibilitySensor>\n\n          <p className='text-right'>\n            <span className='official-name'>{official.name}</span>\n            <br />\n            <span className='office-name'>{officeName}</span>\n            <br />\n\n            <span className='office-party'>\n              { party.includes('Republican') && <Icon icon='republican' color='#E91D0E' /> }\n              { party.includes('Democrat') && <Icon icon='democrat' color='#232066' /> }\n              <span className='icon-text'>{party}</span>\n            </span>\n\n          </p>\n        </div>\n\n        <div className='card-body'>\n          <div className='row'>\n            <div className='col'>\n              <address>\n                {\n                  official.address && official.address.length > 0 &&\n                  <p>\n                    \n                      { official.address[0].line1 !== '' && <span>{official.address[0].line1}<br /></span> }\n                      { official.address[0].line2 !== '' && <span>{official.address[0].line2}<br /></span> }\n                      { official.address[0].line3 !== '' && <span>{official.address[0].line3}<br />></span> }\n                      <span>{official.address[0].city}, {official.address[0].state} {official.address[0].zip}<br /></span>\n                    \n                  </p>\n                }\n\n                {\n                  official.phones && official.phones.length > 0 &&\n                  <>\n                    <Icon icon='phone' />\n                    <a className='icon-text' href={`tel:${official.phones[0]}`}>{official.phones[0]}</a>\n                    <br />\n                  </>\n                }\n              </address>\n            </div>\n          </div>\n          \n          {/* <pre>{JSON.stringify(official, null, 2)}</pre> */}\n        </div>\n\n        <div className='card-footer'>\n          <div className='text-center'>\n            {\n              <a title='Search on Ballotpedia' className='btn btn-link' href={`https://ballotpedia.org/wiki/index.php?search=${searchName}`} target='_blank' rel='noopener noreferrer'>\n                <Icon icon='vote-yea' size='2x' />\n              </a>\n            }\n\n            {\n              official.emails && official.emails.length > 0 &&\n              <a title='Send Email' className='btn btn-link' href={`mailto:${official.emails[0]}`}>\n                <Icon icon='envelope' size='2x' />\n              </a>\n            }\n\n            {\n              official.phones && official.phones.length > 0 &&\n                <a title={`Call: ${official.phones[0]}`} className='btn btn-link' href={`tel://${official.phones[0]}`}>\n                  <Icon icon='phone' size='2x' />\n                </a>\n            }\n\n            {\n              official.address && official.address.length > 0 &&\n              <span title='View on Map' className='btn btn-link' onClick={() => this.mapAddress(official.address[0]) }>\n                <Icon icon='map-marker-alt' size='2x' />\n              </span>\n            }\n\n            {\n              official.urls && official.urls.length > 0 &&\n                <a title={`Visit website: ${official.urls[0]}`} className='btn btn-link' href={official.urls[0]} target='_blank' rel='noopener noreferrer'>\n                  <Icon icon='link' size='2x' />\n                </a>\n            }\n\n            {\n              official.channels && official.channels.length > 0 &&\n              official.channels.map(channel => {\n                let icon = null\n                let url = null\n                let appUrl = null\n\n                switch (channel.type) {\n                  case 'Facebook':\n                    icon = <Icon icon={['fab', 'facebook']} size='2x' />\n                    url = `https://fb.me/${channel.id}`\n                    // Have to do extra work to convert page name to page ID; not now\n                    // appUrl = `fb://profile?id=${channel.id}`\n                    appUrl = url\n                    break;\n                  case 'Twitter':\n                    icon = <Icon icon={['fab', 'twitter']} size='2x' />\n                    url = `https://twitter.com/${channel.id}`\n                    appUrl = `twitter://user?screen_name=${channel.id}`\n                    break;\n                  case 'YouTube':\n                    // Sometimes it's a channel ID instead. Not a quick way to determine channel/user without Youtube API. Avoiding for now.\n                    icon = <Icon icon={['fab', 'youtube']} size='2x' />\n                    url = `https://youtube.com/user/${channel.id}`\n                    appUrl = url\n                    break;\n                  default:\n                    icon = null\n                }\n\n                return (\n                  <span key={channel.type + channel.id}>\n                      {\n                        icon &&\n                        <a title={`${channel.type}: ${channel.id}`} className='btn btn-link' key={channel.type + channel.id} href={/Mobi|Android/i.test(navigator.userAgent) ? appUrl : url} target='_blank' rel='noopener noreferrer'>\n                          {icon}\n                        </a>\n                      }\n                  </span>\n                )\n              })\n            }\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n","/*\n  App: WhoGoverns.me\n  Author: Jay Mathis <https://github.com/mathiscode/whogoverns.me>\n  License: See LICENSE.md\n\n  Description:\n    This app pulls Google Civic data to assist citizens in contacting their representatives.\n*/\n\nimport React, { Component } from 'react'\nimport { Helmet } from 'react-helmet'\nimport { FontAwesomeIcon as Icon } from '@fortawesome/react-fontawesome'\nimport { Fab, Action } from 'react-tiny-fab'\nimport 'react-tiny-fab/dist/styles.css'\n\nimport Google from './lib/google-api'\n\nimport Navbar from './components/Navbar'\nimport LoadingSpinner from './components/LoadingSpinner'\nimport AddressBar from './components/AddressBar'\nimport OfficialCard from './components/OfficialCard'\n\nconst MapsAPIUrl = `https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_GOOGLE_API_KEY}&libraries=places`\n\nclass App extends Component {\n  state = {\n    isLoading: false,\n    showAddressBar: false,\n    representatives: null\n  }\n\n  componentDidMount = () => {\n    let interval;\n    const checkGMapsLoaded = () => {\n      if (window.google) {\n        this.setState({ showAddressBar: true }, () => {\n          document.querySelector('.location-search-input').focus()\n          document.querySelector('.location-search-input').addEventListener('focus', e => {\n            e.target.select()\n          })\n        })\n\n        clearInterval(interval)\n      }\n    }\n\n    interval = setInterval(checkGMapsLoaded, 100)\n\n    fetch('https://json.geoiplookup.io')\n      .then(res => res.json())\n      .then(data => {\n        if (data.country_code !== 'US') {\n          window.alert('Please note that this app only provides data for the United States')\n        }\n      })\n      .catch(err => {\n        console.log(err)\n      })\n\n    setInterval(this.checkFABState, 200)\n  }\n\n  checkFABState = () => {\n    // Stop animating the FAB if active\n    const openFAB = document.querySelector('.rtf')\n    if (openFAB.classList.contains('open')) document.querySelector('.rtf--mb').classList.remove('animate__animated', 'animate__infinite', 'animate__slower', 'animate__bounce')\n    if (openFAB.classList.contains('closed')) document.querySelector('.rtf--mb').classList.add('animate__animated', 'animate__infinite', 'animate__slower', 'animate__bounce')\n  }\n\n  onChange = async (address, latLng) => {\n    // console.log(address, latLng)\n\n    try {\n      this.setState({ isLoading: true, representatives: null })\n      let results = await Google.representatives({ address })\n\n      let divisions = []\n      Object.values(results.data.divisions).forEach(division => {\n        divisions.push({ name: division.name, offices: division.officeIndices })\n      })\n\n      const usa = divisions.find(div => div.name === 'United States')\n      divisions = divisions.filter(div => div.name !== 'United States')\n      divisions.unshift(usa)\n\n      this.setState({\n        isLoading: false,\n        representatives: { divisions, offices: results.data.offices, officials: results.data.officials }\n      })\n\n      document.querySelector('.address-search-container').classList.add('done')\n      document.querySelector('.location-search-input').blur()\n\n      document.title = `Who Governs Me? • ${address}`\n    } catch (e) {\n      console.error(e)\n    }\n  }\n\n  scrollToTop = () => {\n    window.scrollTo(0, 0)\n  }\n\n  render() {\n    const actionStyle = {\n      backgroundColor: '#2222aa'\n    }\n\n    return (\n      <>\n        <Helmet>\n          <script src={MapsAPIUrl}></script>\n\n          {\n            process.env.REACT_APP_GOOGLE_ANALYTICS_ID &&\n              <script async src={`https://www.googletagmanager.com/gtag/js?id=${process.env.REACT_APP_GOOGLE_ANALYTICS_ID}`}></script>\n          }\n\n          {\n            process.env.REACT_APP_GOOGLE_ANALYTICS_ID &&\n            <script>\n              {\n                `window.dataLayer = window.dataLayer || [];\n                function gtag(){dataLayer.push(arguments);}\n                gtag('js', new Date());\n                gtag('config', '${process.env.REACT_APP_GOOGLE_ANALYTICS_ID}');\n              `}\n            </script>\n          }\n        </Helmet>\n        \n        <Navbar />\n\n        <div className='container address-search-container'>\n          <h1 className='address-bar-title'>Research the people you're supposed to trust:</h1>\n          { !this.state.showAddressBar && <LoadingSpinner size={64} /> }\n          {\n            this.state.showAddressBar &&\n              <div className='animate__animated animate__fadeInDownBig'>\n                <AddressBar \n                  onChange={this.onChange}\n                />\n              </div>\n          }\n        </div>\n        \n        <div className='container search-results-wrapper'>\n          <h3 className=\"quote animate__animated animate__backInUp animate__delay-1s\">\"It's not the voting that's democracy; it's the counting.\" <small>&mdash; Tom Stoppard</small></h3>\n\n          {\n            this.state.isLoading && <LoadingSpinner />\n          }\n\n          {\n            this.state.representatives &&\n            <div className='row'>\n              <div className='col'>\n                {\n                  this.state.representatives.divisions.map(division => {\n                    if (!division.offices || division.offices.length === 0) return null\n\n                    let safeDivisionName = division.name.replace(/([' | ])+/g, '_')\n\n                    return (\n                      <section key={division.name} id={'SECTION_' + safeDivisionName}>\n                        <div className='card mt-4'>\n                          <div className='card-header bg-dark text-white'>\n                            <h3>\n                              <Icon icon='landmark' />\n                              <span style={{ marginLeft: '20px' }}>{division.name !== 'United States' ? division.name : 'Federal'}</span>\n                            </h3>\n                          </div>\n                          \n                          <div id={safeDivisionName} className='card-body collapse show'>\n                            <div className='card-deck'>\n                              {\n                                division.offices && division.offices.map(officeIndex => {\n                                  const office = this.state.representatives.offices[officeIndex]\n                                  const officials = office.officialIndices.map(officialIndex => this.state.representatives.officials[officialIndex])\n\n                                  return (\n                                    <React.Fragment key={officeIndex}>\n                                      \n                                        {\n                                          officials.map(official => {\n                                            return (\n                                              <OfficialCard key={official.name + Math.random()} office={office} official={official} />\n                                            )\n                                          })\n                                        }\n                                      \n                                    </React.Fragment>\n                                  )\n                                })\n                              }\n                            </div>\n                          </div>\n                        </div>\n                      </section>\n                    )\n                  })\n                }\n              </div>\n            </div>\n          }\n\n          {/* <pre>{JSON.stringify(this.state.representatives, null, 2)}</pre> */}\n        </div>\n\n        <footer className='footer mt-auto py-3 animate__animated animate__slideInUp'>\n          <div className='container'>\n            <a href='https://github.com/sponsors/mathiscode' target='_blank' rel='noopener noreferrer'>Made with <Icon icon='heart' color='#d00' /> by Jay Mathis</a>\n            <small className='float-right'><em>Data provided by <a href='https://developers.google.com/civic-information' target='_blank' rel='noopener noreferrer'>Google Civic Information</a></em></small>\n          </div>\n        </footer>\n\n        <Fab\n          // className='rtf closed animate__animated animate__infinite animate__slower animate__bounce'\n          // onClick={e => {\n          //   const container = document.querySelector('ul.rtf')\n\n          //   if (Array.from(container.classList).includes('closed')) {\n          //     container.classList.remove('closed')\n          //     container.classList.add('open')\n          //   } else {\n          //     container.classList.remove('open')\n          //     container.classList.add('closed')\n          //   }\n          // }}\n          alwaysShowTitle={true}\n          event='click'\n          icon={<Icon icon='bars' />}\n          mainButtonStyles={{ backgroundColor: '#aa0000' }}\n          children={\n            [\n              <Action text='Search' style={actionStyle}\n                onClick={() => {\n                  this.scrollToTop()\n                  document.querySelector('.location-search-input').focus()\n                }}\n              >\n                <Icon icon='search' />\n              </Action>,\n\n              <Action text='Register to Vote' style={actionStyle} onClick={() => window.open('https://www.vote.org/register-to-vote/', '_blank')}><Icon icon='vote-yea' /></Action>,\n              <Action text='Buy me a beer' style={actionStyle} onClick={() => window.open('https://github.com/sponsors/mathiscode', '_blank')}><Icon icon='beer' /></Action>\n            ]\n          }\n        />\n      </>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/wgm-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'WhoGoverns.me Service Worker ready!'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { fab } from '@fortawesome/free-brands-svg-icons'\n\nimport App from './App'\n\nimport 'bootstrap/dist/css/bootstrap.css'\nimport './index.scss'\nimport 'animate.css'\n\nimport * as serviceWorker from './serviceWorker'\n\n// Setup FontAwesome Library\nimport {\n  faAngleDoubleUp, \n  faBars, \n  faEnvelope, \n  faGavel, \n  faHeart, \n  faLink, \n  faMapMarkerAlt, \n  faPhone, \n  faGlobeAmericas, \n  faDemocrat, \n  faRepublican, \n  faVoteYea, \n  faWindowMinimize, \n  faBeer, \n  faSearch,\n  faLandmark,\n  faCity\n} from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(\n  fab,\n  faAngleDoubleUp,\n  faBars,\n  faEnvelope,\n  faGavel,\n  faHeart,\n  faLink,\n  faMapMarkerAlt,\n  faPhone,\n  faGlobeAmericas,\n  faDemocrat,\n  faRepublican,\n  faVoteYea,\n  faWindowMinimize,\n  faBeer,\n  faSearch,\n  faLandmark,\n  faCity\n)\n\nReactDOM.render(<App />, document.getElementById('root'))\n\nserviceWorker.register()"],"sourceRoot":""}